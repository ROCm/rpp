#include <rppi_image_augmentations.h>
#include <rppi_geometry_transforms.h>
#include <rppdefs.h>
#include "rppi_validate.hpp"

#ifdef HIP_COMPILE
// #include <hip/rpp_hip_common.hpp>
#include "hip/hip_declarations.hpp"

#elif defined(OCL_COMPILE)
#include <cl/rpp_cl_common.hpp>
#include "cl/cl_declarations.hpp"
#endif //backend
#include <stdio.h>
#include <iostream>
#include <fstream>
#include <chrono>
using namespace std::chrono;


#include "cpu/host_image_augmentations.hpp"

RppStatus
rppi_brightness_u8_pln1_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,rppHandle_t rppHandle )
{

#ifdef OCL_COMPILE
    {
        brightness_cl(
            static_cast<cl_mem>(srcPtr),
             srcSize,
            static_cast<cl_mem>(dstPtr),
            alpha,
            beta,
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            alpha,
            beta,
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln1_ROI_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln1_batchSS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln1_batchDS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln1_batchPS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln1_batchSD_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln1_batchDD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln1_batchPD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln1_batchSS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln1_batchDS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln1_batchPS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln1_batchSD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln1_batchDD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln1_batchPD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln1_batchSS_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln1_batchDS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln1_batchPS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln1_batchSD_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln1_batchDD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln1_batchPD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln3_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,rppHandle_t rppHandle )
{

#ifdef OCL_COMPILE
    {
        brightness_cl(
            static_cast<cl_mem>(srcPtr),
             srcSize,
            static_cast<cl_mem>(dstPtr),
            alpha,
            beta,
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            alpha,
            beta,
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln3_ROI_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln3_batchSS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln3_batchDS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln3_batchPS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln3_batchSD_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln3_batchDD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln3_batchPD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln3_batchSS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln3_batchDS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln3_batchPS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln3_batchSD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln3_batchDD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln3_batchPD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln3_batchSS_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln3_batchDS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln3_batchPS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln3_batchSD_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln3_batchDD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln3_batchPD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pkd3_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,rppHandle_t rppHandle )
{

#ifdef OCL_COMPILE
    {
        brightness_cl(
            static_cast<cl_mem>(srcPtr),
             srcSize,
            static_cast<cl_mem>(dstPtr),
            alpha,
            beta,
            RPPI_CHN_PACKED, 3
            ,rpp::deref(rppHandle));
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            alpha,
            beta,
            RPPI_CHN_PACKED, 3
            ,rpp::deref(rppHandle));
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pkd3_ROI_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pkd3_batchSS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pkd3_batchDS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pkd3_batchPS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pkd3_batchSD_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pkd3_batchDD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pkd3_batchPD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pkd3_batchSS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pkd3_batchDS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pkd3_batchPS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pkd3_batchSD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pkd3_batchDD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pkd3_batchPD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pkd3_batchSS_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pkd3_batchDS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pkd3_batchPS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pkd3_batchSD_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pkd3_batchDD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pkd3_batchPD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        brightness_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        brightness_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln1_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,rppHandle_t rppHandle )
{
    brightness_host<Rpp8u>(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            alpha,
            beta,
            RPPI_CHN_PLANAR, 1
            );


    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln1_ROI_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[1].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln1_batchSS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[1].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln1_batchDS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[1].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln1_batchPS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[1].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln1_batchSD_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        beta,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln1_batchDD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        beta,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln1_batchPD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        beta,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln1_batchSS_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[1].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln1_batchDS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[1].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln1_batchPS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[1].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln1_batchSD_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        beta,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln1_batchDD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        beta,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln1_batchPD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        beta,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln1_batchSS_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[1].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln1_batchDS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[1].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln1_batchPS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[1].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln1_batchSD_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        beta,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln1_batchDD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        beta,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln1_batchPD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        beta,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln3_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,rppHandle_t rppHandle )
{
    brightness_host<Rpp8u>(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            alpha,
            beta,
            RPPI_CHN_PLANAR, 1
            );


    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln3_ROI_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[1].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln3_batchSS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[1].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln3_batchDS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[1].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln3_batchPS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[1].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln3_batchSD_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        beta,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln3_batchDD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        beta,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln3_batchPD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        beta,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln3_batchSS_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[1].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln3_batchDS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[1].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln3_batchPS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[1].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln3_batchSD_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        beta,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln3_batchDD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        beta,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln3_batchPD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        beta,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln3_batchSS_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[1].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln3_batchDS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[1].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln3_batchPS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[1].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln3_batchSD_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        beta,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln3_batchDD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        beta,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pln3_batchPD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        beta,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pkd3_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,rppHandle_t rppHandle )
{
    brightness_host<Rpp8u>(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            alpha,
            beta,
            RPPI_CHN_PACKED, 3
            );


    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pkd3_ROI_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[1].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pkd3_batchSS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[1].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pkd3_batchDS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[1].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pkd3_batchPS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[1].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pkd3_batchSD_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        beta,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pkd3_batchDD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        beta,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pkd3_batchPD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        beta,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pkd3_batchSS_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[1].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pkd3_batchDS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[1].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pkd3_batchPS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[1].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pkd3_batchSD_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        beta,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pkd3_batchDD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        beta,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pkd3_batchPD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        beta,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pkd3_batchSS_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[1].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pkd3_batchDS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[1].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pkd3_batchPS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32f beta ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (beta, rpp::deref(rppHandle), paramIndex++);
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[1].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pkd3_batchSD_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        beta,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pkd3_batchDD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        beta,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_brightness_u8_pkd3_batchPD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32f *beta ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    brightness_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        beta,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln1_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,rppHandle_t rppHandle )
{

#ifdef OCL_COMPILE
    {
        blend_cl(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
             srcSize,
            static_cast<cl_mem>(dstPtr),
            alpha,
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip(
            static_cast<Rpp8u *>(srcPtr1),
            static_cast<Rpp8u *>(srcPtr2),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            alpha,
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln1_ROI_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln1_batchSS_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln1_batchDS_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln1_batchPS_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln1_batchSD_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln1_batchDD_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln1_batchPD_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln1_batchSS_ROIS_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln1_batchDS_ROIS_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln1_batchPS_ROIS_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln1_batchSD_ROIS_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln1_batchDD_ROIS_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln1_batchPD_ROIS_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln1_batchSS_ROID_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln1_batchDS_ROID_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln1_batchPS_ROID_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln1_batchSD_ROID_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln1_batchDD_ROID_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln1_batchPD_ROID_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln3_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,rppHandle_t rppHandle )
{

#ifdef OCL_COMPILE
    {
        blend_cl(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
             srcSize,
            static_cast<cl_mem>(dstPtr),
            alpha,
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip(
            static_cast<Rpp8u *>(srcPtr1),
            static_cast<Rpp8u *>(srcPtr2),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            alpha,
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln3_ROI_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln3_batchSS_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln3_batchDS_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln3_batchPS_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln3_batchSD_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln3_batchDD_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln3_batchPD_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln3_batchSS_ROIS_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln3_batchDS_ROIS_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln3_batchPS_ROIS_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln3_batchSD_ROIS_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln3_batchDD_ROIS_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln3_batchPD_ROIS_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln3_batchSS_ROID_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln3_batchDS_ROID_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln3_batchPS_ROID_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln3_batchSD_ROID_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln3_batchDD_ROID_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln3_batchPD_ROID_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pkd3_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,rppHandle_t rppHandle )
{

#ifdef OCL_COMPILE
    {
        blend_cl(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
             srcSize,
            static_cast<cl_mem>(dstPtr),
            alpha,
            RPPI_CHN_PACKED, 3
            ,rpp::deref(rppHandle));
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip(
            static_cast<Rpp8u *>(srcPtr1),
            static_cast<Rpp8u *>(srcPtr2),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            alpha,
            RPPI_CHN_PACKED, 3
            ,rpp::deref(rppHandle));
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pkd3_ROI_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pkd3_batchSS_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pkd3_batchDS_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pkd3_batchPS_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pkd3_batchSD_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pkd3_batchDD_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pkd3_batchPD_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pkd3_batchSS_ROIS_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pkd3_batchDS_ROIS_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pkd3_batchPS_ROIS_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pkd3_batchSD_ROIS_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pkd3_batchDD_ROIS_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pkd3_batchPD_ROIS_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pkd3_batchSS_ROID_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pkd3_batchDS_ROID_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pkd3_batchPS_ROID_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pkd3_batchSD_ROID_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pkd3_batchDD_ROID_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pkd3_batchPD_ROID_gpu(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        blend_cl_batch(
            static_cast<cl_mem>(srcPtr1),
            static_cast<cl_mem>(srcPtr2),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        blend_hip_batch(
            static_cast<Rpp8u*>(srcPtr1),
            static_cast<Rpp8u*>(srcPtr2),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln1_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,rppHandle_t rppHandle )
{
    blend_host(
            static_cast<Rpp8u *>(srcPtr1),
            static_cast<Rpp8u *>(srcPtr2),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            alpha,
            RPPI_CHN_PLANAR, 1
            );


    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln1_ROI_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln1_batchSS_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln1_batchDS_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln1_batchPS_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln1_batchSD_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln1_batchDD_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln1_batchPD_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln1_batchSS_ROIS_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln1_batchDS_ROIS_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln1_batchPS_ROIS_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln1_batchSD_ROIS_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln1_batchDD_ROIS_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln1_batchPD_ROIS_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln1_batchSS_ROID_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln1_batchDS_ROID_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln1_batchPS_ROID_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln1_batchSD_ROID_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln1_batchDD_ROID_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln1_batchPD_ROID_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln3_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,rppHandle_t rppHandle )
{
    blend_host(
            static_cast<Rpp8u *>(srcPtr1),
            static_cast<Rpp8u *>(srcPtr2),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            alpha,
            RPPI_CHN_PLANAR, 1
            );


    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln3_ROI_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln3_batchSS_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln3_batchDS_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln3_batchPS_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln3_batchSD_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln3_batchDD_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln3_batchPD_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln3_batchSS_ROIS_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln3_batchDS_ROIS_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln3_batchPS_ROIS_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln3_batchSD_ROIS_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln3_batchDD_ROIS_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln3_batchPD_ROIS_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln3_batchSS_ROID_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln3_batchDS_ROID_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln3_batchPS_ROID_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln3_batchSD_ROID_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln3_batchDD_ROID_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pln3_batchPD_ROID_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pkd3_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,rppHandle_t rppHandle )
{
    blend_host(
            static_cast<Rpp8u *>(srcPtr1),
            static_cast<Rpp8u *>(srcPtr2),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            alpha,
            RPPI_CHN_PACKED, 3
            );


    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pkd3_ROI_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pkd3_batchSS_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pkd3_batchDS_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pkd3_batchPS_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pkd3_batchSD_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pkd3_batchDD_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pkd3_batchPD_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pkd3_batchSS_ROIS_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pkd3_batchDS_ROIS_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pkd3_batchPS_ROIS_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pkd3_batchSD_ROIS_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pkd3_batchDD_ROIS_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pkd3_batchPD_ROIS_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pkd3_batchSS_ROID_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pkd3_batchDS_ROID_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pkd3_batchPS_ROID_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f alpha ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (alpha, rpp::deref(rppHandle), paramIndex++);
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pkd3_batchSD_ROID_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pkd3_batchDD_ROID_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blend_u8_pkd3_batchPD_ROID_host(RppPtr_t srcPtr1 ,RppPtr_t srcPtr2 ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *alpha ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    blend_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr1),
        static_cast<Rpp8u*>(srcPtr2),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        alpha,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln1_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,rppHandle_t rppHandle )
{

#ifdef OCL_COMPILE
    {
        gamma_correction_cl(
            static_cast<cl_mem>(srcPtr),
             srcSize,
            static_cast<cl_mem>(dstPtr),
            gamma,
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            gamma,
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln1_ROI_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln1_batchSS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln1_batchDS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln1_batchPS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln1_batchSD_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln1_batchDD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln1_batchPD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln1_batchSS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln1_batchDS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln1_batchPS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln1_batchSD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln1_batchDD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln1_batchPD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln1_batchSS_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln1_batchDS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln1_batchPS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln1_batchSD_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln1_batchDD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln1_batchPD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln3_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,rppHandle_t rppHandle )
{

#ifdef OCL_COMPILE
    {
        gamma_correction_cl(
            static_cast<cl_mem>(srcPtr),
             srcSize,
            static_cast<cl_mem>(dstPtr),
            gamma,
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            gamma,
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln3_ROI_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln3_batchSS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln3_batchDS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln3_batchPS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln3_batchSD_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln3_batchDD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln3_batchPD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln3_batchSS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln3_batchDS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln3_batchPS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln3_batchSD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln3_batchDD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln3_batchPD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln3_batchSS_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln3_batchDS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln3_batchPS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln3_batchSD_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln3_batchDD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln3_batchPD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pkd3_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,rppHandle_t rppHandle )
{

#ifdef OCL_COMPILE
    {
        gamma_correction_cl(
            static_cast<cl_mem>(srcPtr),
             srcSize,
            static_cast<cl_mem>(dstPtr),
            gamma,
            RPPI_CHN_PACKED, 3
            ,rpp::deref(rppHandle));
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            gamma,
            RPPI_CHN_PACKED, 3
            ,rpp::deref(rppHandle));
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pkd3_ROI_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pkd3_batchSS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pkd3_batchDS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pkd3_batchPS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pkd3_batchSD_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pkd3_batchDD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pkd3_batchPD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pkd3_batchSS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pkd3_batchDS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pkd3_batchPS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pkd3_batchSD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pkd3_batchDD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pkd3_batchPD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pkd3_batchSS_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pkd3_batchDS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pkd3_batchPS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pkd3_batchSD_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pkd3_batchDD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pkd3_batchPD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        gamma_correction_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        gamma_correction_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln1_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,rppHandle_t rppHandle )
{
    gamma_correction_host(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            gamma,
            RPPI_CHN_PLANAR, 1
            );


    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln1_ROI_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln1_batchSS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln1_batchDS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln1_batchPS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln1_batchSD_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        gamma,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln1_batchDD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        gamma,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln1_batchPD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        gamma,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln1_batchSS_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln1_batchDS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln1_batchPS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln1_batchSD_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        gamma,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln1_batchDD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        gamma,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln1_batchPD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        gamma,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln1_batchSS_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln1_batchDS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln1_batchPS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln1_batchSD_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        gamma,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln1_batchDD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        gamma,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln1_batchPD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        gamma,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln3_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,rppHandle_t rppHandle )
{
    gamma_correction_host(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            gamma,
            RPPI_CHN_PLANAR, 1
            );


    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln3_ROI_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln3_batchSS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln3_batchDS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln3_batchPS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln3_batchSD_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        gamma,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln3_batchDD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        gamma,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln3_batchPD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        gamma,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln3_batchSS_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln3_batchDS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln3_batchPS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln3_batchSD_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        gamma,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln3_batchDD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        gamma,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln3_batchPD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        gamma,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln3_batchSS_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln3_batchDS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln3_batchPS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln3_batchSD_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        gamma,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln3_batchDD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        gamma,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pln3_batchPD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        gamma,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pkd3_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,rppHandle_t rppHandle )
{
    gamma_correction_host(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            gamma,
            RPPI_CHN_PACKED, 3
            );


    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pkd3_ROI_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pkd3_batchSS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pkd3_batchDS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pkd3_batchPS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pkd3_batchSD_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        gamma,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pkd3_batchDD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        gamma,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pkd3_batchPD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        gamma,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pkd3_batchSS_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pkd3_batchDS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pkd3_batchPS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pkd3_batchSD_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        gamma,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pkd3_batchDD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        gamma,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pkd3_batchPD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        gamma,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pkd3_batchSS_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pkd3_batchDS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pkd3_batchPS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f gamma ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (gamma, rpp::deref(rppHandle), paramIndex++);
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pkd3_batchSD_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        gamma,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pkd3_batchDD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        gamma,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_gamma_correction_u8_pkd3_batchPD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *gamma ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    gamma_correction_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        gamma,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}
RppStatus
rppi_pixelate_u8_pln1_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,rppHandle_t rppHandle )
{

#ifdef OCL_COMPILE
    {
        pixelate_cl(
            static_cast<cl_mem>(srcPtr),
             srcSize,
            static_cast<cl_mem>(dstPtr),
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln1_ROI_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln1_batchSS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln1_batchDS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln1_batchPS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln1_batchSD_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln1_batchDD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln1_batchPD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln1_batchSS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln1_batchDS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln1_batchPS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln1_batchSD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln1_batchDD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln1_batchPD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln1_batchSS_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln1_batchDS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln1_batchPS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln1_batchSD_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln1_batchDD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln1_batchPD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln3_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,rppHandle_t rppHandle )
{

#ifdef OCL_COMPILE
    {
        pixelate_cl(
            static_cast<cl_mem>(srcPtr),
             srcSize,
            static_cast<cl_mem>(dstPtr),
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln3_ROI_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln3_batchSS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln3_batchDS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln3_batchPS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln3_batchSD_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln3_batchDD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln3_batchPD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln3_batchSS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln3_batchDS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln3_batchPS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln3_batchSD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln3_batchDD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln3_batchPD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln3_batchSS_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln3_batchDS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln3_batchPS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln3_batchSD_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln3_batchDD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln3_batchPD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pkd3_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,rppHandle_t rppHandle )
{

#ifdef OCL_COMPILE
    {
        pixelate_cl(
            static_cast<cl_mem>(srcPtr),
             srcSize,
            static_cast<cl_mem>(dstPtr),
            RPPI_CHN_PACKED, 3
            ,rpp::deref(rppHandle));
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            RPPI_CHN_PACKED, 3
            ,rpp::deref(rppHandle));
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pkd3_ROI_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pkd3_batchSS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pkd3_batchDS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pkd3_batchPS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pkd3_batchSD_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pkd3_batchDD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pkd3_batchPD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pkd3_batchSS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pkd3_batchDS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pkd3_batchPS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pkd3_batchSD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pkd3_batchDD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pkd3_batchPD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pkd3_batchSS_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pkd3_batchDS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pkd3_batchPS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pkd3_batchSD_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pkd3_batchDD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pkd3_batchPD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);

#ifdef OCL_COMPILE
    {
        pixelate_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        pixelate_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln1_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,rppHandle_t rppHandle )
{
    pixelate_host(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            RPPI_CHN_PLANAR, 1
            );


    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln1_ROI_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln1_batchSS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln1_batchDS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln1_batchPS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln1_batchSD_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln1_batchDD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln1_batchPD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln1_batchSS_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln1_batchDS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln1_batchPS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln1_batchSD_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln1_batchDD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln1_batchPD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln1_batchSS_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln1_batchDS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln1_batchPS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln1_batchSD_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln1_batchDD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln1_batchPD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln3_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,rppHandle_t rppHandle )
{
    pixelate_host(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            RPPI_CHN_PLANAR, 1
            );


    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln3_ROI_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln3_batchSS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln3_batchDS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln3_batchPS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln3_batchSD_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln3_batchDD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln3_batchPD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln3_batchSS_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln3_batchDS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln3_batchPS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln3_batchSD_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln3_batchDD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln3_batchPD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln3_batchSS_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln3_batchDS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln3_batchPS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln3_batchSD_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln3_batchDD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pln3_batchPD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pkd3_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,rppHandle_t rppHandle )
{
    pixelate_host(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            RPPI_CHN_PACKED, 3
            );


    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pkd3_ROI_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pkd3_batchSS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pkd3_batchDS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pkd3_batchPS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pkd3_batchSD_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pkd3_batchDD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pkd3_batchPD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pkd3_batchSS_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pkd3_batchDS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pkd3_batchPS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pkd3_batchSD_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pkd3_batchDD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pkd3_batchPD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pkd3_batchSS_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pkd3_batchDS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pkd3_batchPS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pkd3_batchSD_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pkd3_batchDD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_pixelate_u8_pkd3_batchPD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    pixelate_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}
// RppStatus
// rppi_fog_u8_pln1_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,rppHandle_t rppHandle )
// {

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl(
// 			static_cast<cl_mem>(srcPtr),
// 			 srcSize,
// 			static_cast<cl_mem>(dstPtr),
// 			fogValue,
// 			RPPI_CHN_PLANAR, 1
// 			,rpp::deref(rppHandle));
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip(
// 			static_cast<Rpp8u *>(srcPtr),
// 			 srcSize,
// 			static_cast<Rpp8u *>(dstPtr),
// 			fogValue,
// 			RPPI_CHN_PLANAR, 1
// 			,rpp::deref(rppHandle));
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln1_ROI_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,RppiROI roiPoints ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 1
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 1
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln1_batchSS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	RppiROI roiPoints;
// 	roiPoints.x = 0;
// 	roiPoints.y = 0;
// 	roiPoints.roiHeight = 0;
// 	roiPoints.roiWidth = 0;
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 1
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 1
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln1_batchDS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	RppiROI roiPoints;
// 	roiPoints.x = 0;
// 	roiPoints.y = 0;
// 	roiPoints.roiHeight = 0;
// 	roiPoints.roiWidth = 0;
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 1
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 1
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln1_batchPS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	RppiROI roiPoints;
// 	roiPoints.x = 0;
// 	roiPoints.y = 0;
// 	roiPoints.roiHeight = 0;
// 	roiPoints.roiWidth = 0;
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 1
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 1
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln1_batchSD_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	RppiROI roiPoints;
// 	roiPoints.x = 0;
// 	roiPoints.y = 0;
// 	roiPoints.roiHeight = 0;
// 	roiPoints.roiWidth = 0;
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 1
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 1
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln1_batchDD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	RppiROI roiPoints;
// 	roiPoints.x = 0;
// 	roiPoints.y = 0;
// 	roiPoints.roiHeight = 0;
// 	roiPoints.roiWidth = 0;
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 1
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 1
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln1_batchPD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	RppiROI roiPoints;
// 	roiPoints.x = 0;
// 	roiPoints.y = 0;
// 	roiPoints.roiHeight = 0;
// 	roiPoints.roiWidth = 0;
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 1
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 1
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln1_batchSS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 1
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 1
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln1_batchDS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 1
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 1
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln1_batchPS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 1
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 1
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln1_batchSD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 1
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 1
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln1_batchDD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 1
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 1
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln1_batchPD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 1
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 1
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln1_batchSS_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 1
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 1
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln1_batchDS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 1
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 1
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln1_batchPS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 1
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 1
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln1_batchSD_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 1
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 1
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln1_batchDD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 1
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 1
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln1_batchPD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 1
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 1
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln3_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,rppHandle_t rppHandle )
// {

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl(
// 			static_cast<cl_mem>(srcPtr),
// 			 srcSize,
// 			static_cast<cl_mem>(dstPtr),
// 			fogValue,
// 			RPPI_CHN_PLANAR, 1
// 			,rpp::deref(rppHandle));
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip(
// 			static_cast<Rpp8u *>(srcPtr),
// 			 srcSize,
// 			static_cast<Rpp8u *>(dstPtr),
// 			fogValue,
// 			RPPI_CHN_PLANAR, 1
// 			,rpp::deref(rppHandle));
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln3_ROI_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,RppiROI roiPoints ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 3
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 3
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln3_batchSS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	RppiROI roiPoints;
// 	roiPoints.x = 0;
// 	roiPoints.y = 0;
// 	roiPoints.roiHeight = 0;
// 	roiPoints.roiWidth = 0;
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 3
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 3
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln3_batchDS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	RppiROI roiPoints;
// 	roiPoints.x = 0;
// 	roiPoints.y = 0;
// 	roiPoints.roiHeight = 0;
// 	roiPoints.roiWidth = 0;
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 3
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 3
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln3_batchPS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	RppiROI roiPoints;
// 	roiPoints.x = 0;
// 	roiPoints.y = 0;
// 	roiPoints.roiHeight = 0;
// 	roiPoints.roiWidth = 0;
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 3
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 3
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln3_batchSD_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	RppiROI roiPoints;
// 	roiPoints.x = 0;
// 	roiPoints.y = 0;
// 	roiPoints.roiHeight = 0;
// 	roiPoints.roiWidth = 0;
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 3
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 3
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln3_batchDD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	RppiROI roiPoints;
// 	roiPoints.x = 0;
// 	roiPoints.y = 0;
// 	roiPoints.roiHeight = 0;
// 	roiPoints.roiWidth = 0;
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 3
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 3
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln3_batchPD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	RppiROI roiPoints;
// 	roiPoints.x = 0;
// 	roiPoints.y = 0;
// 	roiPoints.roiHeight = 0;
// 	roiPoints.roiWidth = 0;
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 3
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 3
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln3_batchSS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 3
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 3
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln3_batchDS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 3
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 3
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln3_batchPS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 3
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 3
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln3_batchSD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 3
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 3
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln3_batchDD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 3
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 3
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln3_batchPD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 3
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 3
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln3_batchSS_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 3
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 3
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln3_batchDS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 3
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 3
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln3_batchPS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 3
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 3
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln3_batchSD_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 3
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 3
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln3_batchDD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 3
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 3
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln3_batchPD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 3
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PLANAR, 3
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pkd3_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,rppHandle_t rppHandle )
// {

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl(
// 			static_cast<cl_mem>(srcPtr),
// 			 srcSize,
// 			static_cast<cl_mem>(dstPtr),
// 			fogValue,
// 			RPPI_CHN_PACKED, 3
// 			,rpp::deref(rppHandle));
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip(
// 			static_cast<Rpp8u *>(srcPtr),
// 			 srcSize,
// 			static_cast<Rpp8u *>(dstPtr),
// 			fogValue,
// 			RPPI_CHN_PACKED, 3
// 			,rpp::deref(rppHandle));
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pkd3_ROI_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,RppiROI roiPoints ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PACKED, 3
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PACKED, 3
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pkd3_batchSS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	RppiROI roiPoints;
// 	roiPoints.x = 0;
// 	roiPoints.y = 0;
// 	roiPoints.roiHeight = 0;
// 	roiPoints.roiWidth = 0;
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PACKED, 3
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PACKED, 3
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pkd3_batchDS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	RppiROI roiPoints;
// 	roiPoints.x = 0;
// 	roiPoints.y = 0;
// 	roiPoints.roiHeight = 0;
// 	roiPoints.roiWidth = 0;
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PACKED, 3
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PACKED, 3
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pkd3_batchPS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	RppiROI roiPoints;
// 	roiPoints.x = 0;
// 	roiPoints.y = 0;
// 	roiPoints.roiHeight = 0;
// 	roiPoints.roiWidth = 0;
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PACKED, 3
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PACKED, 3
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pkd3_batchSD_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	RppiROI roiPoints;
// 	roiPoints.x = 0;
// 	roiPoints.y = 0;
// 	roiPoints.roiHeight = 0;
// 	roiPoints.roiWidth = 0;
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PACKED, 3
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PACKED, 3
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pkd3_batchDD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	RppiROI roiPoints;
// 	roiPoints.x = 0;
// 	roiPoints.y = 0;
// 	roiPoints.roiHeight = 0;
// 	roiPoints.roiWidth = 0;
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PACKED, 3
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PACKED, 3
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pkd3_batchPD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	RppiROI roiPoints;
// 	roiPoints.x = 0;
// 	roiPoints.y = 0;
// 	roiPoints.roiHeight = 0;
// 	roiPoints.roiWidth = 0;
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PACKED, 3
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PACKED, 3
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pkd3_batchSS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PACKED, 3
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PACKED, 3
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pkd3_batchDS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PACKED, 3
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PACKED, 3
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pkd3_batchPS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PACKED, 3
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PACKED, 3
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pkd3_batchSD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PACKED, 3
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PACKED, 3
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pkd3_batchDD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PACKED, 3
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PACKED, 3
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pkd3_batchPD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PACKED, 3
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PACKED, 3
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pkd3_batchSS_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PACKED, 3
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PACKED, 3
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pkd3_batchDS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PACKED, 3
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PACKED, 3
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pkd3_batchPS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PACKED, 3
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PACKED, 3
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pkd3_batchSD_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PACKED, 3
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PACKED, 3
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pkd3_batchDD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PACKED, 3
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PACKED, 3
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pkd3_batchPD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
// 	copy_roi(roiPoints, rpp::deref(rppHandle));
// 	get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

// #ifdef OCL_COMPILE
// 	{
// 		fog_cl_batch(
// 			static_cast<cl_mem>(srcPtr),
// 			static_cast<cl_mem>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PACKED, 3
// 		);
// 	}
// #elif defined (HIP_COMPILE)
// 	{
// 		fog_hip_batch(
// 			static_cast<Rpp8u*>(srcPtr),
// 			static_cast<Rpp8u*>(dstPtr),
// 			rpp::deref(rppHandle),
// 			RPPI_CHN_PACKED, 3
// 		);
// 	}
// #endif //BACKEND

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln1_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,rppHandle_t rppHandle )
// {
// 	fog_host(
// 			static_cast<Rpp8u *>(srcPtr),
// 			 srcSize,
// 			static_cast<Rpp8u *>(dstPtr),
// 			fogValue,
// 			RPPI_CHN_PLANAR, 1
// 			);


// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln1_ROI_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,RppiROI roiPoints ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_host_roi(roiPoints, rpp::deref(rppHandle));
// 	copy_host_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PLANAR, 1
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln1_batchSS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	RppiROI roiPoints;
// 	roiPoints.x = 0;
// 	roiPoints.y = 0;
// 	roiPoints.roiHeight = 0;
// 	roiPoints.roiWidth = 0;
// 	copy_host_roi(roiPoints, rpp::deref(rppHandle));
// 	copy_host_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PLANAR, 1
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln1_batchDS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	RppiROI roiPoints;
// 	roiPoints.x = 0;
// 	roiPoints.y = 0;
// 	roiPoints.roiHeight = 0;
// 	roiPoints.roiWidth = 0;
// 	copy_host_roi(roiPoints, rpp::deref(rppHandle));
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		srcSize,
// 		srcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PLANAR, 1
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln1_batchPS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	RppiROI roiPoints;
// 	roiPoints.x = 0;
// 	roiPoints.y = 0;
// 	roiPoints.roiHeight = 0;
// 	roiPoints.roiWidth = 0;
// 	copy_host_roi(roiPoints, rpp::deref(rppHandle));
// 	copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		srcSize,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PLANAR, 1
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln1_batchSD_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	RppiROI roiPoints;
// 	roiPoints.x = 0;
// 	roiPoints.y = 0;
// 	roiPoints.roiHeight = 0;
// 	roiPoints.roiWidth = 0;
// 	copy_host_roi(roiPoints, rpp::deref(rppHandle));
// 	copy_host_srcSize(srcSize, rpp::deref(rppHandle));
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		fogValue,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PLANAR, 1
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln1_batchDD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	RppiROI roiPoints;
// 	roiPoints.x = 0;
// 	roiPoints.y = 0;
// 	roiPoints.roiHeight = 0;
// 	roiPoints.roiWidth = 0;
// 	copy_host_roi(roiPoints, rpp::deref(rppHandle));
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		srcSize,
// 		srcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		fogValue,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PLANAR, 1
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln1_batchPD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	RppiROI roiPoints;
// 	roiPoints.x = 0;
// 	roiPoints.y = 0;
// 	roiPoints.roiHeight = 0;
// 	roiPoints.roiWidth = 0;
// 	copy_host_roi(roiPoints, rpp::deref(rppHandle));
// 	copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		srcSize,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		fogValue,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PLANAR, 1
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln1_batchSS_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_host_roi(roiPoints, rpp::deref(rppHandle));
// 	copy_host_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PLANAR, 1
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln1_batchDS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_host_roi(roiPoints, rpp::deref(rppHandle));
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		srcSize,
// 		srcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PLANAR, 1
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln1_batchPS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_host_roi(roiPoints, rpp::deref(rppHandle));
// 	copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		srcSize,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PLANAR, 1
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln1_batchSD_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_host_roi(roiPoints, rpp::deref(rppHandle));
// 	copy_host_srcSize(srcSize, rpp::deref(rppHandle));
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		fogValue,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PLANAR, 1
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln1_batchDD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_host_roi(roiPoints, rpp::deref(rppHandle));
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		srcSize,
// 		srcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		fogValue,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PLANAR, 1
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln1_batchPD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_host_roi(roiPoints, rpp::deref(rppHandle));
// 	copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		srcSize,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		fogValue,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PLANAR, 1
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln1_batchSS_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_host_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
// 		roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PLANAR, 1
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln1_batchDS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		srcSize,
// 		srcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
// 		roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PLANAR, 1
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln1_batchPS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		srcSize,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
// 		roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PLANAR, 1
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln1_batchSD_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_host_srcSize(srcSize, rpp::deref(rppHandle));
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		fogValue,
// 		roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PLANAR, 1
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln1_batchDD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		srcSize,
// 		srcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		fogValue,
// 		roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PLANAR, 1
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln1_batchPD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		srcSize,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		fogValue,
// 		roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PLANAR, 1
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln3_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,rppHandle_t rppHandle )
// {
// 	fog_host(
// 			static_cast<Rpp8u *>(srcPtr),
// 			 srcSize,
// 			static_cast<Rpp8u *>(dstPtr),
// 			fogValue,
// 			RPPI_CHN_PLANAR, 1
// 			);


// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln3_ROI_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,RppiROI roiPoints ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_host_roi(roiPoints, rpp::deref(rppHandle));
// 	copy_host_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PLANAR, 3
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln3_batchSS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	RppiROI roiPoints;
// 	roiPoints.x = 0;
// 	roiPoints.y = 0;
// 	roiPoints.roiHeight = 0;
// 	roiPoints.roiWidth = 0;
// 	copy_host_roi(roiPoints, rpp::deref(rppHandle));
// 	copy_host_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PLANAR, 3
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln3_batchDS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	RppiROI roiPoints;
// 	roiPoints.x = 0;
// 	roiPoints.y = 0;
// 	roiPoints.roiHeight = 0;
// 	roiPoints.roiWidth = 0;
// 	copy_host_roi(roiPoints, rpp::deref(rppHandle));
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		srcSize,
// 		srcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PLANAR, 3
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln3_batchPS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	RppiROI roiPoints;
// 	roiPoints.x = 0;
// 	roiPoints.y = 0;
// 	roiPoints.roiHeight = 0;
// 	roiPoints.roiWidth = 0;
// 	copy_host_roi(roiPoints, rpp::deref(rppHandle));
// 	copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		srcSize,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PLANAR, 3
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln3_batchSD_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	RppiROI roiPoints;
// 	roiPoints.x = 0;
// 	roiPoints.y = 0;
// 	roiPoints.roiHeight = 0;
// 	roiPoints.roiWidth = 0;
// 	copy_host_roi(roiPoints, rpp::deref(rppHandle));
// 	copy_host_srcSize(srcSize, rpp::deref(rppHandle));
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		fogValue,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PLANAR, 3
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln3_batchDD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	RppiROI roiPoints;
// 	roiPoints.x = 0;
// 	roiPoints.y = 0;
// 	roiPoints.roiHeight = 0;
// 	roiPoints.roiWidth = 0;
// 	copy_host_roi(roiPoints, rpp::deref(rppHandle));
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		srcSize,
// 		srcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		fogValue,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PLANAR, 3
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln3_batchPD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	RppiROI roiPoints;
// 	roiPoints.x = 0;
// 	roiPoints.y = 0;
// 	roiPoints.roiHeight = 0;
// 	roiPoints.roiWidth = 0;
// 	copy_host_roi(roiPoints, rpp::deref(rppHandle));
// 	copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		srcSize,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		fogValue,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PLANAR, 3
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln3_batchSS_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_host_roi(roiPoints, rpp::deref(rppHandle));
// 	copy_host_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PLANAR, 3
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln3_batchDS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_host_roi(roiPoints, rpp::deref(rppHandle));
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		srcSize,
// 		srcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PLANAR, 3
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln3_batchPS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_host_roi(roiPoints, rpp::deref(rppHandle));
// 	copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		srcSize,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PLANAR, 3
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln3_batchSD_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_host_roi(roiPoints, rpp::deref(rppHandle));
// 	copy_host_srcSize(srcSize, rpp::deref(rppHandle));
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		fogValue,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PLANAR, 3
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln3_batchDD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_host_roi(roiPoints, rpp::deref(rppHandle));
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		srcSize,
// 		srcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		fogValue,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PLANAR, 3
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln3_batchPD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_host_roi(roiPoints, rpp::deref(rppHandle));
// 	copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		srcSize,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		fogValue,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PLANAR, 3
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln3_batchSS_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_host_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
// 		roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PLANAR, 3
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln3_batchDS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		srcSize,
// 		srcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
// 		roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PLANAR, 3
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln3_batchPS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		srcSize,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
// 		roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PLANAR, 3
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln3_batchSD_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_host_srcSize(srcSize, rpp::deref(rppHandle));
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		fogValue,
// 		roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PLANAR, 3
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln3_batchDD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		srcSize,
// 		srcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		fogValue,
// 		roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PLANAR, 3
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pln3_batchPD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		srcSize,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		fogValue,
// 		roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PLANAR, 3
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pkd3_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,rppHandle_t rppHandle )
// {
// 	fog_host(
// 			static_cast<Rpp8u *>(srcPtr),
// 			 srcSize,
// 			static_cast<Rpp8u *>(dstPtr),
// 			fogValue,
// 			RPPI_CHN_PACKED, 3
// 			);


// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pkd3_ROI_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,RppiROI roiPoints ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_host_roi(roiPoints, rpp::deref(rppHandle));
// 	copy_host_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PACKED, 3
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pkd3_batchSS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	RppiROI roiPoints;
// 	roiPoints.x = 0;
// 	roiPoints.y = 0;
// 	roiPoints.roiHeight = 0;
// 	roiPoints.roiWidth = 0;
// 	copy_host_roi(roiPoints, rpp::deref(rppHandle));
// 	copy_host_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PACKED, 3
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pkd3_batchDS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	RppiROI roiPoints;
// 	roiPoints.x = 0;
// 	roiPoints.y = 0;
// 	roiPoints.roiHeight = 0;
// 	roiPoints.roiWidth = 0;
// 	copy_host_roi(roiPoints, rpp::deref(rppHandle));
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		srcSize,
// 		srcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PACKED, 3
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pkd3_batchPS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	RppiROI roiPoints;
// 	roiPoints.x = 0;
// 	roiPoints.y = 0;
// 	roiPoints.roiHeight = 0;
// 	roiPoints.roiWidth = 0;
// 	copy_host_roi(roiPoints, rpp::deref(rppHandle));
// 	copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		srcSize,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PACKED, 3
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pkd3_batchSD_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	RppiROI roiPoints;
// 	roiPoints.x = 0;
// 	roiPoints.y = 0;
// 	roiPoints.roiHeight = 0;
// 	roiPoints.roiWidth = 0;
// 	copy_host_roi(roiPoints, rpp::deref(rppHandle));
// 	copy_host_srcSize(srcSize, rpp::deref(rppHandle));
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		fogValue,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PACKED, 3
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pkd3_batchDD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	RppiROI roiPoints;
// 	roiPoints.x = 0;
// 	roiPoints.y = 0;
// 	roiPoints.roiHeight = 0;
// 	roiPoints.roiWidth = 0;
// 	copy_host_roi(roiPoints, rpp::deref(rppHandle));
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		srcSize,
// 		srcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		fogValue,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PACKED, 3
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pkd3_batchPD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	RppiROI roiPoints;
// 	roiPoints.x = 0;
// 	roiPoints.y = 0;
// 	roiPoints.roiHeight = 0;
// 	roiPoints.roiWidth = 0;
// 	copy_host_roi(roiPoints, rpp::deref(rppHandle));
// 	copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		srcSize,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		fogValue,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PACKED, 3
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pkd3_batchSS_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_host_roi(roiPoints, rpp::deref(rppHandle));
// 	copy_host_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PACKED, 3
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pkd3_batchDS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_host_roi(roiPoints, rpp::deref(rppHandle));
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		srcSize,
// 		srcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PACKED, 3
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pkd3_batchPS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_host_roi(roiPoints, rpp::deref(rppHandle));
// 	copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		srcSize,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PACKED, 3
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pkd3_batchSD_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_host_roi(roiPoints, rpp::deref(rppHandle));
// 	copy_host_srcSize(srcSize, rpp::deref(rppHandle));
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		fogValue,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PACKED, 3
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pkd3_batchDD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_host_roi(roiPoints, rpp::deref(rppHandle));
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		srcSize,
// 		srcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		fogValue,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PACKED, 3
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pkd3_batchPD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_host_roi(roiPoints, rpp::deref(rppHandle));
// 	copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		srcSize,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		fogValue,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PACKED, 3
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pkd3_batchSS_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_host_srcSize(srcSize, rpp::deref(rppHandle));
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
// 		roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PACKED, 3
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pkd3_batchDS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		srcSize,
// 		srcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
// 		roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PACKED, 3
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pkd3_batchPS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
// 	copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		srcSize,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
// 		roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PACKED, 3
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pkd3_batchSD_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_host_srcSize(srcSize, rpp::deref(rppHandle));
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		fogValue,
// 		roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PACKED, 3
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pkd3_batchDD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		srcSize,
// 		srcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		fogValue,
// 		roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PACKED, 3
// 	);

// 	return RPP_SUCCESS;
// }

// RppStatus
// rppi_fog_u8_pkd3_batchPD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
// {
// 	Rpp32u paramIndex = 0;
// 	copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
// 	fog_host_batch<Rpp8u>(
// 		static_cast<Rpp8u*>(srcPtr),
// 		srcSize,
// 		rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
// 		static_cast<Rpp8u*>(dstPtr),
// 		fogValue,
// 		roiPoints,
// 		rpp::deref(rppHandle).GetBatchSize(),
// 		RPPI_CHN_PACKED, 3
// 	);

// 	return RPP_SUCCESS;
// }
RppStatus
rppi_snow_u8_pln1_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,rppHandle_t rppHandle )
{

#ifdef OCL_COMPILE
    {
        snow_cl(
            static_cast<cl_mem>(srcPtr),
             srcSize,
            static_cast<cl_mem>(dstPtr),
            snowValue,
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            snowValue,
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln1_ROI_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln1_batchSS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln1_batchDS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln1_batchPS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln1_batchSD_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln1_batchDD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln1_batchPD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln1_batchSS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln1_batchDS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln1_batchPS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln1_batchSD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln1_batchDD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln1_batchPD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln1_batchSS_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln1_batchDS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln1_batchPS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln1_batchSD_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln1_batchDD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln1_batchPD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln3_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,rppHandle_t rppHandle )
{

#ifdef OCL_COMPILE
    {
        snow_cl(
            static_cast<cl_mem>(srcPtr),
             srcSize,
            static_cast<cl_mem>(dstPtr),
            snowValue,
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            snowValue,
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln3_ROI_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln3_batchSS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln3_batchDS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln3_batchPS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln3_batchSD_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln3_batchDD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln3_batchPD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln3_batchSS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln3_batchDS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln3_batchPS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln3_batchSD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln3_batchDD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln3_batchPD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln3_batchSS_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln3_batchDS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln3_batchPS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln3_batchSD_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln3_batchDD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln3_batchPD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pkd3_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,rppHandle_t rppHandle )
{

#ifdef OCL_COMPILE
    {
        snow_cl(
            static_cast<cl_mem>(srcPtr),
             srcSize,
            static_cast<cl_mem>(dstPtr),
            snowValue,
            RPPI_CHN_PACKED, 3
            ,rpp::deref(rppHandle));
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            snowValue,
            RPPI_CHN_PACKED, 3
            ,rpp::deref(rppHandle));
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pkd3_ROI_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pkd3_batchSS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pkd3_batchDS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pkd3_batchPS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pkd3_batchSD_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pkd3_batchDD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pkd3_batchPD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pkd3_batchSS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pkd3_batchDS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pkd3_batchPS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pkd3_batchSD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pkd3_batchDD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pkd3_batchPD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pkd3_batchSS_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pkd3_batchDS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pkd3_batchPS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pkd3_batchSD_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pkd3_batchDD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pkd3_batchPD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        snow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        snow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln1_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,rppHandle_t rppHandle )
{
    snow_host<Rpp8u>(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            snowValue,
            RPPI_CHN_PLANAR, 1
            );


    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln1_ROI_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln1_batchSS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln1_batchDS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln1_batchPS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln1_batchSD_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        snowValue,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln1_batchDD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        snowValue,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln1_batchPD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        snowValue,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln1_batchSS_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln1_batchDS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln1_batchPS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln1_batchSD_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        snowValue,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln1_batchDD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        snowValue,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln1_batchPD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        snowValue,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln1_batchSS_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln1_batchDS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln1_batchPS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln1_batchSD_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        snowValue,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln1_batchDD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        snowValue,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln1_batchPD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        snowValue,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln3_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,rppHandle_t rppHandle )
{
    snow_host<Rpp8u>(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            snowValue,
            RPPI_CHN_PLANAR, 1
            );


    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln3_ROI_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln3_batchSS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln3_batchDS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln3_batchPS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln3_batchSD_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        snowValue,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln3_batchDD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        snowValue,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln3_batchPD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        snowValue,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln3_batchSS_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln3_batchDS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln3_batchPS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln3_batchSD_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        snowValue,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln3_batchDD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        snowValue,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln3_batchPD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        snowValue,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln3_batchSS_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln3_batchDS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln3_batchPS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln3_batchSD_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        snowValue,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln3_batchDD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        snowValue,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pln3_batchPD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        snowValue,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pkd3_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,rppHandle_t rppHandle )
{
    snow_host<Rpp8u>(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            snowValue,
            RPPI_CHN_PACKED, 3
            );


    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pkd3_ROI_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pkd3_batchSS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pkd3_batchDS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pkd3_batchPS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pkd3_batchSD_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        snowValue,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pkd3_batchDD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        snowValue,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pkd3_batchPD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        snowValue,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pkd3_batchSS_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pkd3_batchDS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pkd3_batchPS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pkd3_batchSD_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        snowValue,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pkd3_batchDD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        snowValue,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pkd3_batchPD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        snowValue,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pkd3_batchSS_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pkd3_batchDS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pkd3_batchPS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f snowValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (snowValue, rpp::deref(rppHandle), paramIndex++);
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pkd3_batchSD_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        snowValue,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pkd3_batchDD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        snowValue,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_snow_u8_pkd3_batchPD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *snowValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    snow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        snowValue,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}
RppStatus
rppi_jitter_u8_pln1_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,rppHandle_t rppHandle )
{

#ifdef OCL_COMPILE
    {
        jitter_cl(
            static_cast<cl_mem>(srcPtr),
             srcSize,
            static_cast<cl_mem>(dstPtr),
            kernelSize,
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            kernelSize,
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln1_ROI_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln1_batchSS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln1_batchDS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln1_batchPS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln1_batchSD_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln1_batchDD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln1_batchPD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln1_batchSS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln1_batchDS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln1_batchPS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln1_batchSD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln1_batchDD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln1_batchPD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln1_batchSS_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln1_batchDS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln1_batchPS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln1_batchSD_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln1_batchDD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln1_batchPD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln3_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,rppHandle_t rppHandle )
{

#ifdef OCL_COMPILE
    {
        jitter_cl(
            static_cast<cl_mem>(srcPtr),
             srcSize,
            static_cast<cl_mem>(dstPtr),
            kernelSize,
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            kernelSize,
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln3_ROI_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln3_batchSS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln3_batchDS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln3_batchPS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln3_batchSD_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln3_batchDD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln3_batchPD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln3_batchSS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln3_batchDS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln3_batchPS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln3_batchSD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln3_batchDD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln3_batchPD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln3_batchSS_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln3_batchDS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln3_batchPS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln3_batchSD_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln3_batchDD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln3_batchPD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pkd3_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,rppHandle_t rppHandle )
{

#ifdef OCL_COMPILE
    {
        jitter_cl(
            static_cast<cl_mem>(srcPtr),
             srcSize,
            static_cast<cl_mem>(dstPtr),
            kernelSize,
            RPPI_CHN_PACKED, 3
            ,rpp::deref(rppHandle));
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            kernelSize,
            RPPI_CHN_PACKED, 3
            ,rpp::deref(rppHandle));
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pkd3_ROI_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pkd3_batchSS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pkd3_batchDS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pkd3_batchPS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pkd3_batchSD_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pkd3_batchDD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pkd3_batchPD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pkd3_batchSS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pkd3_batchDS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pkd3_batchPS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pkd3_batchSD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pkd3_batchDD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pkd3_batchPD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pkd3_batchSS_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pkd3_batchDS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pkd3_batchPS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pkd3_batchSD_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pkd3_batchDD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pkd3_batchPD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        jitter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        jitter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln1_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,rppHandle_t rppHandle )
{
    jitter_host(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            kernelSize,
            RPPI_CHN_PLANAR, 1
            );


    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln1_ROI_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln1_batchSS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln1_batchDS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln1_batchPS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln1_batchSD_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln1_batchDD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln1_batchPD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln1_batchSS_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln1_batchDS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln1_batchPS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln1_batchSD_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln1_batchDD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln1_batchPD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln1_batchSS_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln1_batchDS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln1_batchPS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln1_batchSD_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln1_batchDD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln1_batchPD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln3_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,rppHandle_t rppHandle )
{
    jitter_host(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            kernelSize,
            RPPI_CHN_PLANAR, 1
            );


    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln3_ROI_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln3_batchSS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln3_batchDS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln3_batchPS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln3_batchSD_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln3_batchDD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln3_batchPD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln3_batchSS_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln3_batchDS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln3_batchPS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln3_batchSD_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln3_batchDD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln3_batchPD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln3_batchSS_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln3_batchDS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln3_batchPS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln3_batchSD_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln3_batchDD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pln3_batchPD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pkd3_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,rppHandle_t rppHandle )
{
    jitter_host(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            kernelSize,
            RPPI_CHN_PACKED, 3
            );


    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pkd3_ROI_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pkd3_batchSS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pkd3_batchDS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pkd3_batchPS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pkd3_batchSD_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pkd3_batchDD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pkd3_batchPD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pkd3_batchSS_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pkd3_batchDS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pkd3_batchPS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pkd3_batchSD_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pkd3_batchDD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pkd3_batchPD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pkd3_batchSS_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pkd3_batchDS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pkd3_batchPS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pkd3_batchSD_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pkd3_batchDD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_jitter_u8_pkd3_batchPD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    jitter_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}
RppStatus
rppi_contrast_u8_pln1_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,rppHandle_t rppHandle )
{

#ifdef OCL_COMPILE
    {
        contrast_cl(
            static_cast<cl_mem>(srcPtr),
             srcSize,
            static_cast<cl_mem>(dstPtr),
            newMin,
            newMax,
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            newMin,
            newMax,
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln1_ROI_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln1_batchSS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln1_batchDS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln1_batchPS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln1_batchSD_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln1_batchDD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln1_batchPD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln1_batchSS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln1_batchDS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln1_batchPS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln1_batchSD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln1_batchDD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln1_batchPD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln1_batchSS_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln1_batchDS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln1_batchPS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln1_batchSD_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln1_batchDD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln1_batchPD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln3_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,rppHandle_t rppHandle )
{

#ifdef OCL_COMPILE
    {
        contrast_cl(
            static_cast<cl_mem>(srcPtr),
             srcSize,
            static_cast<cl_mem>(dstPtr),
            newMin,
            newMax,
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            newMin,
            newMax,
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln3_ROI_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln3_batchSS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln3_batchDS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln3_batchPS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln3_batchSD_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln3_batchDD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln3_batchPD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln3_batchSS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln3_batchDS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln3_batchPS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln3_batchSD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln3_batchDD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln3_batchPD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln3_batchSS_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln3_batchDS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln3_batchPS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln3_batchSD_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln3_batchDD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln3_batchPD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pkd3_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,rppHandle_t rppHandle )
{

#ifdef OCL_COMPILE
    {
        contrast_cl(
            static_cast<cl_mem>(srcPtr),
             srcSize,
            static_cast<cl_mem>(dstPtr),
            newMin,
            newMax,
            RPPI_CHN_PACKED, 3
            ,rpp::deref(rppHandle));
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            newMin,
            newMax,
            RPPI_CHN_PACKED, 3
            ,rpp::deref(rppHandle));
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pkd3_ROI_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pkd3_batchSS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pkd3_batchDS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pkd3_batchPS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pkd3_batchSD_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pkd3_batchDD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pkd3_batchPD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pkd3_batchSS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pkd3_batchDS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pkd3_batchPS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pkd3_batchSD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pkd3_batchDD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pkd3_batchPD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pkd3_batchSS_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pkd3_batchDS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pkd3_batchPS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pkd3_batchSD_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pkd3_batchDD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pkd3_batchPD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        contrast_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        contrast_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln1_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,rppHandle_t rppHandle )
{
    contrast_host(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            newMin,
            newMax,
            RPPI_CHN_PLANAR, 1
            );


    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln1_ROI_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln1_batchSS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln1_batchDS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln1_batchPS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln1_batchSD_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        newMin,
        newMax,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln1_batchDD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        newMin,
        newMax,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln1_batchPD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        newMin,
        newMax,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln1_batchSS_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln1_batchDS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln1_batchPS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln1_batchSD_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        newMin,
        newMax,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln1_batchDD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        newMin,
        newMax,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln1_batchPD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        newMin,
        newMax,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln1_batchSS_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln1_batchDS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln1_batchPS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln1_batchSD_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        newMin,
        newMax,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln1_batchDD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        newMin,
        newMax,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln1_batchPD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        newMin,
        newMax,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln3_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,rppHandle_t rppHandle )
{
    contrast_host(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            newMin,
            newMax,
            RPPI_CHN_PLANAR, 1
            );


    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln3_ROI_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln3_batchSS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln3_batchDS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln3_batchPS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln3_batchSD_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        newMin,
        newMax,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln3_batchDD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        newMin,
        newMax,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln3_batchPD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        newMin,
        newMax,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln3_batchSS_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln3_batchDS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln3_batchPS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln3_batchSD_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        newMin,
        newMax,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln3_batchDD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        newMin,
        newMax,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln3_batchPD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        newMin,
        newMax,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln3_batchSS_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln3_batchDS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln3_batchPS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln3_batchSD_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        newMin,
        newMax,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln3_batchDD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        newMin,
        newMax,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pln3_batchPD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        newMin,
        newMax,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pkd3_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,rppHandle_t rppHandle )
{
    contrast_host(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            newMin,
            newMax,
            RPPI_CHN_PACKED, 3
            );


    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pkd3_ROI_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pkd3_batchSS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pkd3_batchDS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pkd3_batchPS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pkd3_batchSD_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        newMin,
        newMax,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pkd3_batchDD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        newMin,
        newMax,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pkd3_batchPD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        newMin,
        newMax,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pkd3_batchSS_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pkd3_batchDS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pkd3_batchPS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pkd3_batchSD_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        newMin,
        newMax,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pkd3_batchDD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        newMin,
        newMax,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pkd3_batchPD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        newMin,
        newMax,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pkd3_batchSS_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pkd3_batchDS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pkd3_batchPS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u newMin ,Rpp32u newMax ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_uint (newMin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (newMax, rpp::deref(rppHandle), paramIndex++);
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pkd3_batchSD_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        newMin,
        newMax,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pkd3_batchDD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        newMin,
        newMax,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_contrast_u8_pkd3_batchPD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *newMin ,Rpp32u *newMax ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    contrast_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        newMin,
        newMax,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln1_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,rppHandle_t rppHandle )
{

#ifdef OCL_COMPILE
    {
        exposure_cl(
            static_cast<cl_mem>(srcPtr),
             srcSize,
            static_cast<cl_mem>(dstPtr),
            exposureValue,
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            exposureValue,
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln1_ROI_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln1_batchSS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln1_batchDS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln1_batchPS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln1_batchSD_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln1_batchDD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln1_batchPD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln1_batchSS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln1_batchDS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln1_batchPS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln1_batchSD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln1_batchDD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln1_batchPD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln1_batchSS_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln1_batchDS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln1_batchPS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln1_batchSD_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln1_batchDD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln1_batchPD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln3_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,rppHandle_t rppHandle )
{

#ifdef OCL_COMPILE
    {
        exposure_cl(
            static_cast<cl_mem>(srcPtr),
             srcSize,
            static_cast<cl_mem>(dstPtr),
            exposureValue,
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            exposureValue,
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln3_ROI_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln3_batchSS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln3_batchDS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln3_batchPS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln3_batchSD_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln3_batchDD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln3_batchPD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln3_batchSS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln3_batchDS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln3_batchPS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln3_batchSD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln3_batchDD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln3_batchPD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln3_batchSS_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln3_batchDS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln3_batchPS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln3_batchSD_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln3_batchDD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln3_batchPD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pkd3_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,rppHandle_t rppHandle )
{

#ifdef OCL_COMPILE
    {
        exposure_cl(
            static_cast<cl_mem>(srcPtr),
             srcSize,
            static_cast<cl_mem>(dstPtr),
            exposureValue,
            RPPI_CHN_PACKED, 3
            ,rpp::deref(rppHandle));
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            exposureValue,
            RPPI_CHN_PACKED, 3
            ,rpp::deref(rppHandle));
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pkd3_ROI_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pkd3_batchSS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pkd3_batchDS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pkd3_batchPS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pkd3_batchSD_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pkd3_batchDD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pkd3_batchPD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pkd3_batchSS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pkd3_batchDS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pkd3_batchPS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pkd3_batchSD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pkd3_batchDD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pkd3_batchPD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pkd3_batchSS_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pkd3_batchDS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pkd3_batchPS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pkd3_batchSD_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pkd3_batchDD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pkd3_batchPD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        exposure_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        exposure_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln1_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,rppHandle_t rppHandle )
{
    exposure_host(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            exposureValue,
            RPPI_CHN_PLANAR, 1
            );


    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln1_ROI_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln1_batchSS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln1_batchDS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln1_batchPS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln1_batchSD_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        exposureValue,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln1_batchDD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        exposureValue,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln1_batchPD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        exposureValue,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln1_batchSS_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln1_batchDS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln1_batchPS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln1_batchSD_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        exposureValue,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln1_batchDD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        exposureValue,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln1_batchPD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        exposureValue,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln1_batchSS_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln1_batchDS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln1_batchPS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln1_batchSD_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        exposureValue,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln1_batchDD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        exposureValue,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln1_batchPD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        exposureValue,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln3_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,rppHandle_t rppHandle )
{
    exposure_host(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            exposureValue,
            RPPI_CHN_PLANAR, 1
            );


    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln3_ROI_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln3_batchSS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln3_batchDS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln3_batchPS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln3_batchSD_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        exposureValue,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln3_batchDD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        exposureValue,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln3_batchPD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        exposureValue,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln3_batchSS_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln3_batchDS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln3_batchPS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln3_batchSD_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        exposureValue,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln3_batchDD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        exposureValue,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln3_batchPD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        exposureValue,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln3_batchSS_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln3_batchDS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln3_batchPS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln3_batchSD_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        exposureValue,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln3_batchDD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        exposureValue,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pln3_batchPD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        exposureValue,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pkd3_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,rppHandle_t rppHandle )
{
    exposure_host(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            exposureValue,
            RPPI_CHN_PACKED, 3
            );


    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pkd3_ROI_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pkd3_batchSS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pkd3_batchDS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pkd3_batchPS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pkd3_batchSD_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        exposureValue,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pkd3_batchDD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        exposureValue,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pkd3_batchPD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        exposureValue,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pkd3_batchSS_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pkd3_batchDS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pkd3_batchPS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pkd3_batchSD_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        exposureValue,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pkd3_batchDD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        exposureValue,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pkd3_batchPD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        exposureValue,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pkd3_batchSS_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pkd3_batchDS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pkd3_batchPS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f exposureValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (exposureValue, rpp::deref(rppHandle), paramIndex++);
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pkd3_batchSD_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        exposureValue,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pkd3_batchDD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        exposureValue,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_exposure_u8_pkd3_batchPD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *exposureValue ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    exposure_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        exposureValue,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln1_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,rppHandle_t rppHandle )
{

#ifdef OCL_COMPILE
    {
        box_filter_cl(
            static_cast<cl_mem>(srcPtr),
             srcSize,
            static_cast<cl_mem>(dstPtr),
            kernelSize,
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            kernelSize,
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln1_ROI_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln1_batchSS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln1_batchDS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln1_batchPS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln1_batchSD_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln1_batchDD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln1_batchPD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln1_batchSS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln1_batchDS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln1_batchPS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln1_batchSD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln1_batchDD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln1_batchPD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln1_batchSS_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln1_batchDS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln1_batchPS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln1_batchSD_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln1_batchDD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln1_batchPD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln3_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,rppHandle_t rppHandle )
{

#ifdef OCL_COMPILE
    {
        box_filter_cl(
            static_cast<cl_mem>(srcPtr),
             srcSize,
            static_cast<cl_mem>(dstPtr),
            kernelSize,
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            kernelSize,
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln3_ROI_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln3_batchSS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln3_batchDS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln3_batchPS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln3_batchSD_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln3_batchDD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln3_batchPD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln3_batchSS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln3_batchDS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln3_batchPS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln3_batchSD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln3_batchDD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln3_batchPD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln3_batchSS_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln3_batchDS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln3_batchPS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln3_batchSD_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln3_batchDD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln3_batchPD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pkd3_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,rppHandle_t rppHandle )
{

#ifdef OCL_COMPILE
    {
        box_filter_cl(
            static_cast<cl_mem>(srcPtr),
             srcSize,
            static_cast<cl_mem>(dstPtr),
            kernelSize,
            RPPI_CHN_PACKED, 3
            ,rpp::deref(rppHandle));
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            kernelSize,
            RPPI_CHN_PACKED, 3
            ,rpp::deref(rppHandle));
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pkd3_ROI_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pkd3_batchSS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pkd3_batchDS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pkd3_batchPS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pkd3_batchSD_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pkd3_batchDD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pkd3_batchPD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pkd3_batchSS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pkd3_batchDS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pkd3_batchPS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pkd3_batchSD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pkd3_batchDD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pkd3_batchPD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pkd3_batchSS_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pkd3_batchDS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pkd3_batchPS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pkd3_batchSD_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pkd3_batchDD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pkd3_batchPD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        box_filter_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        box_filter_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln1_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,rppHandle_t rppHandle )
{
    blur_host(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            kernelSize,
            RPPI_CHN_PLANAR, 1
            );


    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln1_ROI_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln1_batchSS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln1_batchDS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln1_batchPS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln1_batchSD_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln1_batchDD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln1_batchPD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln1_batchSS_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln1_batchDS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln1_batchPS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln1_batchSD_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln1_batchDD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln1_batchPD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln1_batchSS_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln1_batchDS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln1_batchPS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln1_batchSD_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln1_batchDD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln1_batchPD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln3_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,rppHandle_t rppHandle )
{
    blur_host(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            kernelSize,
            RPPI_CHN_PLANAR, 1
            );


    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln3_ROI_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln3_batchSS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln3_batchDS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln3_batchPS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln3_batchSD_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln3_batchDD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln3_batchPD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln3_batchSS_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln3_batchDS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln3_batchPS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln3_batchSD_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln3_batchDD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln3_batchPD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln3_batchSS_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln3_batchDS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln3_batchPS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln3_batchSD_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln3_batchDD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pln3_batchPD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pkd3_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,rppHandle_t rppHandle )
{
    blur_host(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            kernelSize,
            RPPI_CHN_PACKED, 3
            );


    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pkd3_ROI_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pkd3_batchSS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pkd3_batchDS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pkd3_batchPS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pkd3_batchSD_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pkd3_batchDD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pkd3_batchPD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pkd3_batchSS_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pkd3_batchDS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pkd3_batchPS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pkd3_batchSD_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pkd3_batchDD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pkd3_batchPD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pkd3_batchSS_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pkd3_batchDS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pkd3_batchPS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_uint (kernelSize, rpp::deref(rppHandle), paramIndex++);
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pkd3_batchSD_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pkd3_batchDD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_blur_u8_pkd3_batchPD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *kernelSize ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    blur_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        kernelSize,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_rain_u8_pln1_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f rainPercentage ,Rpp32u rainWidth ,Rpp32u rainHeight ,Rpp32f transperancy ,rppHandle_t rppHandle )
{

#ifdef OCL_COMPILE
    {
        rain_cl(
            static_cast<cl_mem>(srcPtr),
             srcSize,
            static_cast<cl_mem>(dstPtr),
            rainPercentage,
            rainWidth,
            rainHeight,
            transperancy,
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#elif defined (HIP_COMPILE)
    {
        rain_hip(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            rainPercentage,
            rainWidth,
            rainHeight,
            transperancy,
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_rain_u8_pln1_batchSS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f rainPercentage ,Rpp32u rainWidth ,Rpp32u rainHeight ,Rpp32f transperancy ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (rainPercentage, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainWidth, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainHeight, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (transperancy, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        rain_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        rain_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_rain_u8_pln1_batchSD_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *rainPercentage ,Rpp32u *rainWidth ,Rpp32u *rainHeight ,Rpp32f *transperancy ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (rainPercentage, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainWidth, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainHeight, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (transperancy, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        rain_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        rain_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_rain_u8_pln1_batchDS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f rainPercentage ,Rpp32u rainWidth ,Rpp32u rainHeight ,Rpp32f transperancy ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (rainPercentage, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainWidth, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainHeight, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (transperancy, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        rain_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        rain_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_rain_u8_pln1_batchDD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *rainPercentage ,Rpp32u *rainWidth ,Rpp32u *rainHeight ,Rpp32f *transperancy ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (rainPercentage, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainWidth, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainHeight, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (transperancy, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        rain_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        rain_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_rain_u8_pln1_batchPS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f rainPercentage ,Rpp32u rainWidth ,Rpp32u rainHeight ,Rpp32f transperancy ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (rainPercentage, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainWidth, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainHeight, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (transperancy, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        rain_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        rain_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_rain_u8_pln1_batchPD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *rainPercentage ,Rpp32u *rainWidth ,Rpp32u *rainHeight ,Rpp32f *transperancy ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (rainPercentage, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainWidth, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainHeight, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (transperancy, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        rain_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        rain_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_rain_u8_pln3_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f rainPercentage ,Rpp32u rainWidth ,Rpp32u rainHeight ,Rpp32f transperancy ,rppHandle_t rppHandle )
{

#ifdef OCL_COMPILE
    {
        rain_cl(
            static_cast<cl_mem>(srcPtr),
             srcSize,
            static_cast<cl_mem>(dstPtr),
            rainPercentage,
            rainWidth,
            rainHeight,
            transperancy,
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#elif defined (HIP_COMPILE)
    {
        rain_hip(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            rainPercentage,
            rainWidth,
            rainHeight,
            transperancy,
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_rain_u8_pln3_batchSS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f rainPercentage ,Rpp32u rainWidth ,Rpp32u rainHeight ,Rpp32f transperancy ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (rainPercentage, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainWidth, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainHeight, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (transperancy, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        rain_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        rain_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_rain_u8_pln3_batchSD_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *rainPercentage ,Rpp32u *rainWidth ,Rpp32u *rainHeight ,Rpp32f *transperancy ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (rainPercentage, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainWidth, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainHeight, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (transperancy, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        rain_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        rain_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_rain_u8_pln3_batchDS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f rainPercentage ,Rpp32u rainWidth ,Rpp32u rainHeight ,Rpp32f transperancy ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (rainPercentage, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainWidth, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainHeight, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (transperancy, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        rain_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        rain_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_rain_u8_pln3_batchDD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *rainPercentage ,Rpp32u *rainWidth ,Rpp32u *rainHeight ,Rpp32f *transperancy ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (rainPercentage, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainWidth, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainHeight, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (transperancy, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        rain_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        rain_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_rain_u8_pln3_batchPS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f rainPercentage ,Rpp32u rainWidth ,Rpp32u rainHeight ,Rpp32f transperancy ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (rainPercentage, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainWidth, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainHeight, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (transperancy, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        rain_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        rain_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_rain_u8_pln3_batchPD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *rainPercentage ,Rpp32u *rainWidth ,Rpp32u *rainHeight ,Rpp32f *transperancy ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (rainPercentage, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainWidth, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainHeight, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (transperancy, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        rain_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        rain_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_rain_u8_pkd3_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f rainPercentage ,Rpp32u rainWidth ,Rpp32u rainHeight ,Rpp32f transperancy ,rppHandle_t rppHandle )
{

#ifdef OCL_COMPILE
    {
        rain_cl(
            static_cast<cl_mem>(srcPtr),
             srcSize,
            static_cast<cl_mem>(dstPtr),
            rainPercentage,
            rainWidth,
            rainHeight,
            transperancy,
            RPPI_CHN_PACKED, 3
            ,rpp::deref(rppHandle));
    }
#elif defined (HIP_COMPILE)
    {
        rain_hip(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            rainPercentage,
            rainWidth,
            rainHeight,
            transperancy,
            RPPI_CHN_PACKED, 3
            ,rpp::deref(rppHandle));
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_rain_u8_pkd3_batchSS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f rainPercentage ,Rpp32u rainWidth ,Rpp32u rainHeight ,Rpp32f transperancy ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (rainPercentage, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainWidth, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainHeight, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (transperancy, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        rain_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        rain_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_rain_u8_pkd3_batchSD_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *rainPercentage ,Rpp32u *rainWidth ,Rpp32u *rainHeight ,Rpp32f *transperancy ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (rainPercentage, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainWidth, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainHeight, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (transperancy, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        rain_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        rain_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_rain_u8_pkd3_batchDS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f rainPercentage ,Rpp32u rainWidth ,Rpp32u rainHeight ,Rpp32f transperancy ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (rainPercentage, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainWidth, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainHeight, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (transperancy, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        rain_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        rain_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_rain_u8_pkd3_batchDD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *rainPercentage ,Rpp32u *rainWidth ,Rpp32u *rainHeight ,Rpp32f *transperancy ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (rainPercentage, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainWidth, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainHeight, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (transperancy, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        rain_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        rain_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_rain_u8_pkd3_batchPS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f rainPercentage ,Rpp32u rainWidth ,Rpp32u rainHeight ,Rpp32f transperancy ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (rainPercentage, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainWidth, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainHeight, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (transperancy, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        rain_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        rain_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_rain_u8_pkd3_batchPD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *rainPercentage ,Rpp32u *rainWidth ,Rpp32u *rainHeight ,Rpp32f *transperancy ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (rainPercentage, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainWidth, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainHeight, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (transperancy, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        rain_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        rain_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_rain_u8_pln1_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f rainPercentage ,Rpp32u rainWidth ,Rpp32u rainHeight ,Rpp32f transperancy ,rppHandle_t rppHandle )
{
    rain_host<Rpp8u>(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            rainPercentage,
            rainWidth,
            rainHeight,
            transperancy,
            RPPI_CHN_PLANAR, 1
            );


    return RPP_SUCCESS;
}

RppStatus
rppi_rain_u8_pln1_batchSS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f rainPercentage ,Rpp32u rainWidth ,Rpp32u rainHeight ,Rpp32f transperancy ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (rainPercentage, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainWidth, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainHeight, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (transperancy, rpp::deref(rppHandle), paramIndex++);
    rain_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[2].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[3].floatmem,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_rain_u8_pln1_batchSD_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *rainPercentage ,Rpp32u *rainWidth ,Rpp32u *rainHeight ,Rpp32f *transperancy ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    rain_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rainPercentage,
        rainWidth,
        rainHeight,
        transperancy,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_rain_u8_pln1_batchDS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f rainPercentage ,Rpp32u rainWidth ,Rpp32u rainHeight ,Rpp32f transperancy ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_param_float (rainPercentage, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainWidth, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainHeight, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (transperancy, rpp::deref(rppHandle), paramIndex++);
    rain_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[2].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[3].floatmem,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_rain_u8_pln1_batchDD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *rainPercentage ,Rpp32u *rainWidth ,Rpp32u *rainHeight ,Rpp32f *transperancy ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    rain_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rainPercentage,
        rainWidth,
        rainHeight,
        transperancy,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_rain_u8_pln1_batchPS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f rainPercentage ,Rpp32u rainWidth ,Rpp32u rainHeight ,Rpp32f transperancy ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (rainPercentage, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainWidth, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainHeight, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (transperancy, rpp::deref(rppHandle), paramIndex++);
    rain_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[2].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[3].floatmem,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_rain_u8_pln1_batchPD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *rainPercentage ,Rpp32u *rainWidth ,Rpp32u *rainHeight ,Rpp32f *transperancy ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    rain_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rainPercentage,
        rainWidth,
        rainHeight,
        transperancy,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_rain_u8_pln3_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f rainPercentage ,Rpp32u rainWidth ,Rpp32u rainHeight ,Rpp32f transperancy ,rppHandle_t rppHandle )
{
    rain_host<Rpp8u>(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            rainPercentage,
            rainWidth,
            rainHeight,
            transperancy,
            RPPI_CHN_PLANAR, 1
            );


    return RPP_SUCCESS;
}

RppStatus
rppi_rain_u8_pln3_batchSS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f rainPercentage ,Rpp32u rainWidth ,Rpp32u rainHeight ,Rpp32f transperancy ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (rainPercentage, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainWidth, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainHeight, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (transperancy, rpp::deref(rppHandle), paramIndex++);
    rain_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[2].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[3].floatmem,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_rain_u8_pln3_batchSD_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *rainPercentage ,Rpp32u *rainWidth ,Rpp32u *rainHeight ,Rpp32f *transperancy ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    rain_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rainPercentage,
        rainWidth,
        rainHeight,
        transperancy,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_rain_u8_pln3_batchDS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f rainPercentage ,Rpp32u rainWidth ,Rpp32u rainHeight ,Rpp32f transperancy ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_param_float (rainPercentage, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainWidth, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainHeight, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (transperancy, rpp::deref(rppHandle), paramIndex++);
    rain_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[2].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[3].floatmem,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_rain_u8_pln3_batchDD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *rainPercentage ,Rpp32u *rainWidth ,Rpp32u *rainHeight ,Rpp32f *transperancy ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    rain_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rainPercentage,
        rainWidth,
        rainHeight,
        transperancy,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_rain_u8_pln3_batchPS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f rainPercentage ,Rpp32u rainWidth ,Rpp32u rainHeight ,Rpp32f transperancy ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (rainPercentage, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainWidth, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainHeight, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (transperancy, rpp::deref(rppHandle), paramIndex++);
    rain_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[2].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[3].floatmem,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_rain_u8_pln3_batchPD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *rainPercentage ,Rpp32u *rainWidth ,Rpp32u *rainHeight ,Rpp32f *transperancy ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    rain_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rainPercentage,
        rainWidth,
        rainHeight,
        transperancy,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_rain_u8_pkd3_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f rainPercentage ,Rpp32u rainWidth ,Rpp32u rainHeight ,Rpp32f transperancy ,rppHandle_t rppHandle )
{
    rain_host<Rpp8u>(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            rainPercentage,
            rainWidth,
            rainHeight,
            transperancy,
            RPPI_CHN_PACKED, 3
            );


    return RPP_SUCCESS;
}

RppStatus
rppi_rain_u8_pkd3_batchSS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f rainPercentage ,Rpp32u rainWidth ,Rpp32u rainHeight ,Rpp32f transperancy ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (rainPercentage, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainWidth, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainHeight, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (transperancy, rpp::deref(rppHandle), paramIndex++);
    rain_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[2].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[3].floatmem,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_rain_u8_pkd3_batchSD_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *rainPercentage ,Rpp32u *rainWidth ,Rpp32u *rainHeight ,Rpp32f *transperancy ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    rain_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rainPercentage,
        rainWidth,
        rainHeight,
        transperancy,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_rain_u8_pkd3_batchDS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f rainPercentage ,Rpp32u rainWidth ,Rpp32u rainHeight ,Rpp32f transperancy ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_param_float (rainPercentage, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainWidth, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainHeight, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (transperancy, rpp::deref(rppHandle), paramIndex++);
    rain_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[2].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[3].floatmem,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_rain_u8_pkd3_batchDD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *rainPercentage ,Rpp32u *rainWidth ,Rpp32u *rainHeight ,Rpp32f *transperancy ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    rain_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rainPercentage,
        rainWidth,
        rainHeight,
        transperancy,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_rain_u8_pkd3_batchPS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f rainPercentage ,Rpp32u rainWidth ,Rpp32u rainHeight ,Rpp32f transperancy ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (rainPercentage, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainWidth, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (rainHeight, rpp::deref(rppHandle), paramIndex++);
    copy_param_float (transperancy, rpp::deref(rppHandle), paramIndex++);
    rain_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[2].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[3].floatmem,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_rain_u8_pkd3_batchPD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *rainPercentage ,Rpp32u *rainWidth ,Rpp32u *rainHeight ,Rpp32f *transperancy ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    rain_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rainPercentage,
        rainWidth,
        rainHeight,
        transperancy,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_fog_u8_pln1_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,rppHandle_t rppHandle )
{

#ifdef OCL_COMPILE
    {
        fog_cl(
            static_cast<cl_mem>(srcPtr),
             srcSize,
            static_cast<cl_mem>(dstPtr),
            fogValue,
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#elif defined (HIP_COMPILE)
    {
        fog_hip(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            fogValue,
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_fog_u8_pln1_batchSS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        fog_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        fog_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_fog_u8_pln1_batchSD_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        fog_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        fog_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_fog_u8_pln1_batchDS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        fog_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        fog_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_fog_u8_pln1_batchDD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        fog_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        fog_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_fog_u8_pln1_batchPS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        fog_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        fog_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_fog_u8_pln1_batchPD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);


#ifdef OCL_COMPILE
    {
        fog_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        fog_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_fog_u8_pln3_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,rppHandle_t rppHandle )
{

#ifdef OCL_COMPILE
    {
        fog_cl(
            static_cast<cl_mem>(srcPtr),
             srcSize,
            static_cast<cl_mem>(dstPtr),
            fogValue,
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#elif defined (HIP_COMPILE)
    {
        fog_hip(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            fogValue,
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_fog_u8_pln3_batchSS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        fog_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        fog_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_fog_u8_pln3_batchSD_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        fog_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        fog_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_fog_u8_pln3_batchDS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        fog_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        fog_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_fog_u8_pln3_batchDD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        fog_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        fog_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_fog_u8_pln3_batchPS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        fog_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        fog_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_fog_u8_pln3_batchPD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        fog_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        fog_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_fog_u8_pkd3_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,rppHandle_t rppHandle )
{

#ifdef OCL_COMPILE
    {
        fog_cl(
            static_cast<cl_mem>(srcPtr),
             srcSize,
            static_cast<cl_mem>(dstPtr),
            fogValue,
            RPPI_CHN_PACKED, 3
            ,rpp::deref(rppHandle));
    }
#elif defined (HIP_COMPILE)
    {
        fog_hip(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            fogValue,
            RPPI_CHN_PACKED, 3
            ,rpp::deref(rppHandle));
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_fog_u8_pkd3_batchSS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        fog_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        fog_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_fog_u8_pkd3_batchSD_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        fog_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        fog_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_fog_u8_pkd3_batchDS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        fog_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        fog_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_fog_u8_pkd3_batchDD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        fog_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        fog_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_fog_u8_pkd3_batchPS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        fog_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        fog_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_fog_u8_pkd3_batchPD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);


#ifdef OCL_COMPILE
    {
        fog_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        fog_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_fog_u8_pln1_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,rppHandle_t rppHandle )
{
    fog_host(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            fogValue,
            RPPI_CHN_PLANAR, 1
            );


    return RPP_SUCCESS;
}

RppStatus
rppi_fog_u8_pln1_batchSS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);
    fog_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_fog_u8_pln1_batchSD_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    fog_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        fogValue,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_fog_u8_pln1_batchDS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);
    fog_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_fog_u8_pln1_batchDD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    fog_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        fogValue,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_fog_u8_pln1_batchPS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);
    fog_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_fog_u8_pln1_batchPD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    fog_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        fogValue,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_fog_u8_pln3_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,rppHandle_t rppHandle )
{
    fog_host(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            fogValue,
            RPPI_CHN_PLANAR, 1
            );


    return RPP_SUCCESS;
}

RppStatus
rppi_fog_u8_pln3_batchSS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);
    fog_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_fog_u8_pln3_batchSD_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    fog_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        fogValue,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_fog_u8_pln3_batchDS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);
    fog_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_fog_u8_pln3_batchDD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    fog_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        fogValue,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_fog_u8_pln3_batchPS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);
    fog_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_fog_u8_pln3_batchPD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    fog_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        fogValue,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_fog_u8_pkd3_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,rppHandle_t rppHandle )
{
    fog_host(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            fogValue,
            RPPI_CHN_PACKED, 3
            );


    return RPP_SUCCESS;
}

RppStatus
rppi_fog_u8_pkd3_batchSS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);
    fog_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_fog_u8_pkd3_batchSD_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    fog_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        fogValue,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_fog_u8_pkd3_batchDS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);
    fog_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_fog_u8_pkd3_batchDD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    fog_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        fogValue,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_fog_u8_pkd3_batchPS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (fogValue, rpp::deref(rppHandle), paramIndex++);
    fog_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_fog_u8_pkd3_batchPD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *fogValue ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    fog_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        fogValue,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}


RppStatus
rppi_histogram_balance_u8_pln1_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,rppHandle_t rppHandle )
{

#ifdef OCL_COMPILE
    {
        histogram_balance_cl(
            static_cast<cl_mem>(srcPtr),
             srcSize,
            static_cast<cl_mem>(dstPtr),
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#elif defined (HIP_COMPILE)
    {
        histogram_balance_hip(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_histogram_balance_u8_pln1_batchSS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);

#ifdef OCL_COMPILE
    {
        histogram_balance_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        histogram_balance_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_histogram_balance_u8_pln1_batchSD_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);

#ifdef OCL_COMPILE
    {
        histogram_balance_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        histogram_balance_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_histogram_balance_u8_pln1_batchDS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);

#ifdef OCL_COMPILE
    {
        histogram_balance_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        histogram_balance_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_histogram_balance_u8_pln1_batchDD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);

#ifdef OCL_COMPILE
    {
        histogram_balance_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        histogram_balance_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_histogram_balance_u8_pln1_batchPS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);

#ifdef OCL_COMPILE
    {
        histogram_balance_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        histogram_balance_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_histogram_balance_u8_pln1_batchPD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);

#ifdef OCL_COMPILE
    {
        histogram_balance_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        histogram_balance_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_histogram_balance_u8_pln3_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,rppHandle_t rppHandle )
{

#ifdef OCL_COMPILE
    {
        histogram_balance_cl(
            static_cast<cl_mem>(srcPtr),
             srcSize,
            static_cast<cl_mem>(dstPtr),
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#elif defined (HIP_COMPILE)
    {
        histogram_balance_hip(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_histogram_balance_u8_pln3_batchSS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);

#ifdef OCL_COMPILE
    {
        histogram_balance_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        histogram_balance_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_histogram_balance_u8_pln3_batchSD_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);

#ifdef OCL_COMPILE
    {
        histogram_balance_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        histogram_balance_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_histogram_balance_u8_pln3_batchDS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);

#ifdef OCL_COMPILE
    {
        histogram_balance_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        histogram_balance_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_histogram_balance_u8_pln3_batchDD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);

#ifdef OCL_COMPILE
    {
        histogram_balance_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        histogram_balance_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_histogram_balance_u8_pln3_batchPS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);

#ifdef OCL_COMPILE
    {
        histogram_balance_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        histogram_balance_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_histogram_balance_u8_pln3_batchPD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);

#ifdef OCL_COMPILE
    {
        histogram_balance_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        histogram_balance_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_histogram_balance_u8_pkd3_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,rppHandle_t rppHandle )
{

#ifdef OCL_COMPILE
    {
        histogram_balance_cl(
            static_cast<cl_mem>(srcPtr),
             srcSize,
            static_cast<cl_mem>(dstPtr),
            RPPI_CHN_PACKED, 3
            ,rpp::deref(rppHandle));
    }
#elif defined (HIP_COMPILE)
    {
        histogram_balance_hip(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            RPPI_CHN_PACKED, 3
            ,rpp::deref(rppHandle));
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_histogram_balance_u8_pkd3_batchSS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);

#ifdef OCL_COMPILE
    {
        histogram_balance_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        histogram_balance_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_histogram_balance_u8_pkd3_batchSD_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);

#ifdef OCL_COMPILE
    {
        histogram_balance_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        histogram_balance_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_histogram_balance_u8_pkd3_batchDS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);

#ifdef OCL_COMPILE
    {
        histogram_balance_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        histogram_balance_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_histogram_balance_u8_pkd3_batchDD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);

#ifdef OCL_COMPILE
    {
        histogram_balance_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        histogram_balance_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_histogram_balance_u8_pkd3_batchPS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);

#ifdef OCL_COMPILE
    {
        histogram_balance_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        histogram_balance_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_histogram_balance_u8_pkd3_batchPD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);

#ifdef OCL_COMPILE
    {
        histogram_balance_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        histogram_balance_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_histogram_balance_u8_pln1_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,rppHandle_t rppHandle )
{
    histogram_balance_host(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            RPPI_CHN_PLANAR, 1
            );


    return RPP_SUCCESS;
}

RppStatus
rppi_histogram_balance_u8_pln1_batchSS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    histogram_balance_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_histogram_balance_u8_pln1_batchSD_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    histogram_balance_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_histogram_balance_u8_pln1_batchDS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    histogram_balance_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_histogram_balance_u8_pln1_batchDD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    histogram_balance_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_histogram_balance_u8_pln1_batchPS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    histogram_balance_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_histogram_balance_u8_pln1_batchPD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    histogram_balance_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_histogram_balance_u8_pln3_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,rppHandle_t rppHandle )
{
    histogram_balance_host(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            RPPI_CHN_PLANAR, 1
            );


    return RPP_SUCCESS;
}

RppStatus
rppi_histogram_balance_u8_pln3_batchSS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    histogram_balance_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_histogram_balance_u8_pln3_batchSD_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    histogram_balance_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_histogram_balance_u8_pln3_batchDS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    histogram_balance_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_histogram_balance_u8_pln3_batchDD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    histogram_balance_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_histogram_balance_u8_pln3_batchPS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    histogram_balance_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_histogram_balance_u8_pln3_batchPD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    histogram_balance_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_histogram_balance_u8_pkd3_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,rppHandle_t rppHandle )
{
    histogram_balance_host(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            RPPI_CHN_PACKED, 3
            );


    return RPP_SUCCESS;
}

RppStatus
rppi_histogram_balance_u8_pkd3_batchSS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    histogram_balance_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_histogram_balance_u8_pkd3_batchSD_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    histogram_balance_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_histogram_balance_u8_pkd3_batchDS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    histogram_balance_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_histogram_balance_u8_pkd3_batchDD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    histogram_balance_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_histogram_balance_u8_pkd3_batchPS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    histogram_balance_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}


RppStatus
rppi_histogram_balance_u8_pkd3_batchPD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    histogram_balance_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln1_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,rppHandle_t rppHandle )
{

#ifdef OCL_COMPILE
    {
        noise_cl(
            static_cast<cl_mem>(srcPtr),
             srcSize,
            static_cast<cl_mem>(dstPtr),
            noiseProbability,
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            noiseProbability,
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln1_ROI_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln1_batchSS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln1_batchDS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln1_batchPS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln1_batchSD_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln1_batchDD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln1_batchPD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln1_batchSS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln1_batchDS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln1_batchPS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln1_batchSD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln1_batchDD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln1_batchPD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln1_batchSS_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln1_batchDS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln1_batchPS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln1_batchSD_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln1_batchDD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln1_batchPD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln3_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,rppHandle_t rppHandle )
{

#ifdef OCL_COMPILE
    {
        noise_cl(
            static_cast<cl_mem>(srcPtr),
             srcSize,
            static_cast<cl_mem>(dstPtr),
            noiseProbability,
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            noiseProbability,
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln3_ROI_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln3_batchSS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln3_batchDS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln3_batchPS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln3_batchSD_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln3_batchDD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln3_batchPD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln3_batchSS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln3_batchDS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln3_batchPS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln3_batchSD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln3_batchDD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln3_batchPD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln3_batchSS_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln3_batchDS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln3_batchPS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln3_batchSD_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln3_batchDD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln3_batchPD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pkd3_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,rppHandle_t rppHandle )
{

#ifdef OCL_COMPILE
    {
        noise_cl(
            static_cast<cl_mem>(srcPtr),
             srcSize,
            static_cast<cl_mem>(dstPtr),
            noiseProbability,
            RPPI_CHN_PACKED, 3
            ,rpp::deref(rppHandle));
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            noiseProbability,
            RPPI_CHN_PACKED, 3
            ,rpp::deref(rppHandle));
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pkd3_ROI_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pkd3_batchSS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pkd3_batchDS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pkd3_batchPS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pkd3_batchSD_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pkd3_batchDD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pkd3_batchPD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pkd3_batchSS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pkd3_batchDS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pkd3_batchPS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pkd3_batchSD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pkd3_batchDD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pkd3_batchPD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pkd3_batchSS_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pkd3_batchDS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pkd3_batchPS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pkd3_batchSD_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pkd3_batchDD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pkd3_batchPD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        noise_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        noise_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln1_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,rppHandle_t rppHandle )
{
    noise_host(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            noiseProbability,
            RPPI_CHN_PLANAR, 1
            );


    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln1_ROI_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln1_batchSS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln1_batchDS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln1_batchPS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln1_batchSD_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        noiseProbability,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln1_batchDD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        noiseProbability,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln1_batchPD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        noiseProbability,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln1_batchSS_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln1_batchDS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln1_batchPS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln1_batchSD_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        noiseProbability,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln1_batchDD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        noiseProbability,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln1_batchPD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        noiseProbability,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln1_batchSS_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln1_batchDS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln1_batchPS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln1_batchSD_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        noiseProbability,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln1_batchDD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        noiseProbability,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln1_batchPD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        noiseProbability,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln3_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,rppHandle_t rppHandle )
{
    noise_host(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            noiseProbability,
            RPPI_CHN_PLANAR, 1
            );


    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln3_ROI_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln3_batchSS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln3_batchDS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln3_batchPS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln3_batchSD_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        noiseProbability,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln3_batchDD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        noiseProbability,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln3_batchPD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        noiseProbability,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln3_batchSS_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln3_batchDS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln3_batchPS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln3_batchSD_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        noiseProbability,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln3_batchDD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        noiseProbability,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln3_batchPD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        noiseProbability,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln3_batchSS_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln3_batchDS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln3_batchPS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln3_batchSD_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        noiseProbability,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln3_batchDD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        noiseProbability,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pln3_batchPD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        noiseProbability,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pkd3_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,rppHandle_t rppHandle )
{
    noise_host(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            noiseProbability,
            RPPI_CHN_PACKED, 3
            );


    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pkd3_ROI_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pkd3_batchSS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pkd3_batchDS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pkd3_batchPS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pkd3_batchSD_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        noiseProbability,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pkd3_batchDD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        noiseProbability,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pkd3_batchPD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        noiseProbability,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pkd3_batchSS_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pkd3_batchDS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pkd3_batchPS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pkd3_batchSD_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        noiseProbability,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pkd3_batchDD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        noiseProbability,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pkd3_batchPD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        noiseProbability,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pkd3_batchSS_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pkd3_batchDS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pkd3_batchPS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f noiseProbability ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_float (noiseProbability, rpp::deref(rppHandle), paramIndex++);
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.floatArr[0].floatmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pkd3_batchSD_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        noiseProbability,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pkd3_batchDD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        noiseProbability,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_noise_u8_pkd3_batchPD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32f *noiseProbability ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    noise_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        noiseProbability,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}


RppStatus
rppi_random_crop_letterbox_u8_pln1_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,rppHandle_t rppHandle )
{

#ifdef OCL_COMPILE
    {
        resize_crop_cl(
            static_cast<cl_mem>(srcPtr),
             srcSize,
            static_cast<cl_mem>(dstPtr),
             dstSize,
            xRoiBegin,
            xRoiEnd,
            yRoiBegin,
            yRoiEnd,
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
             dstSize,
            xRoiBegin,
            xRoiEnd,
            yRoiBegin,
            yRoiEnd,
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln1_ROI_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    get_dstBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln1_batchSS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    get_dstBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln1_batchDS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    get_dstBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln1_batchPS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,RppiSize maxDstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (maxDstSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    get_dstBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln1_batchSD_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    get_dstBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln1_batchDD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    get_dstBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln1_batchPD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,RppiSize maxDstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (maxDstSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    get_dstBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        random_crop_letterbox_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        random_crop_letterbox_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln1_batchSS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    get_dstBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln1_batchDS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    get_dstBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln1_batchPS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,RppiSize maxDstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (maxDstSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    get_dstBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln1_batchSD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    get_dstBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln1_batchDD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    get_dstBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln1_batchPD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,RppiSize maxDstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (maxDstSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    get_dstBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln1_batchSS_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    get_dstBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln1_batchDS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    get_dstBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln1_batchPS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,RppiSize maxDstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (maxDstSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    get_dstBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln1_batchSD_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    get_dstBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln1_batchDD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    get_dstBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln1_batchPD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,RppiSize maxDstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (maxDstSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    get_dstBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln3_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,rppHandle_t rppHandle )
{

#ifdef OCL_COMPILE
    {
        resize_crop_cl(
            static_cast<cl_mem>(srcPtr),
             srcSize,
            static_cast<cl_mem>(dstPtr),
             dstSize,
            xRoiBegin,
            xRoiEnd,
            yRoiBegin,
            yRoiEnd,
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
             dstSize,
            xRoiBegin,
            xRoiEnd,
            yRoiBegin,
            yRoiEnd,
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln3_ROI_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    get_dstBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln3_batchSS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    get_dstBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln3_batchDS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    get_dstBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln3_batchPS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,RppiSize maxDstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (maxDstSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    get_dstBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln3_batchSD_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    get_dstBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln3_batchDD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    get_dstBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln3_batchPD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,RppiSize maxDstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (maxDstSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    get_dstBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        random_crop_letterbox_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        random_crop_letterbox_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln3_batchSS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    get_dstBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln3_batchDS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    get_dstBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln3_batchPS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,RppiSize maxDstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (maxDstSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    get_dstBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln3_batchSD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    get_dstBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln3_batchDD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    get_dstBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln3_batchPD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,RppiSize maxDstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (maxDstSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    get_dstBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln3_batchSS_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    get_dstBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln3_batchDS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    get_dstBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln3_batchPS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,RppiSize maxDstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (maxDstSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    get_dstBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln3_batchSD_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    get_dstBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln3_batchDD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    get_dstBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln3_batchPD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,RppiSize maxDstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (maxDstSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    get_dstBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pkd3_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,rppHandle_t rppHandle )
{

#ifdef OCL_COMPILE
    {
        resize_crop_cl(
            static_cast<cl_mem>(srcPtr),
             srcSize,
            static_cast<cl_mem>(dstPtr),
             dstSize,
            xRoiBegin,
            xRoiEnd,
            yRoiBegin,
            yRoiEnd,
            RPPI_CHN_PACKED, 3
            ,rpp::deref(rppHandle));
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
             dstSize,
            xRoiBegin,
            xRoiEnd,
            yRoiBegin,
            yRoiEnd,
            RPPI_CHN_PACKED, 3
            ,rpp::deref(rppHandle));
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pkd3_ROI_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    get_dstBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pkd3_batchSS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    get_dstBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pkd3_batchDS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    get_dstBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pkd3_batchPS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,RppiSize maxDstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (maxDstSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    get_dstBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pkd3_batchSD_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    get_dstBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pkd3_batchDD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    get_dstBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pkd3_batchPD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,RppiSize maxDstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (maxDstSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    get_dstBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        random_crop_letterbox_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        random_crop_letterbox_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pkd3_batchSS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    get_dstBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pkd3_batchDS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    get_dstBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pkd3_batchPS_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,RppiSize maxDstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (maxDstSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    get_dstBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pkd3_batchSD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    get_dstBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pkd3_batchDD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    get_dstBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pkd3_batchPD_ROIS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,RppiSize maxDstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (maxDstSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    get_dstBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pkd3_batchSS_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    get_dstBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pkd3_batchDS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    get_dstBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pkd3_batchPS_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,RppiSize maxDstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (maxDstSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    get_dstBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pkd3_batchSD_ROID_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    get_dstBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pkd3_batchDD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    get_dstBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pkd3_batchPD_ROID_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,RppiSize maxDstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    copy_dstSize(dstSize, rpp::deref(rppHandle));
    copy_dstMaxSize (maxDstSize, rpp::deref(rppHandle));
    copy_roi(roiPoints, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    get_dstBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        resize_crop_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        resize_crop_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln1_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,rppHandle_t rppHandle )
{
    random_crop_letterbox_host(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
             dstSize,
            xRoiBegin,
            xRoiEnd,
            yRoiBegin,
            yRoiEnd,
            RPPI_CHN_PLANAR, 1
            );


    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln1_ROI_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_host_dstSize(dstSize, rpp::deref(rppHandle));
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[2].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[3].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln1_batchSS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_host_dstSize(dstSize, rpp::deref(rppHandle));
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[2].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[3].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln1_batchDS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_dstSize(dstSize, rpp::deref(rppHandle));
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[2].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[3].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln1_batchPS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,RppiSize maxDstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_host_maxDstSize(maxDstSize, rpp::deref(rppHandle));
    copy_host_dstSize(dstSize, rpp::deref(rppHandle));
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxDstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[2].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[3].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln1_batchSD_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        dstSize,
        dstSize,
        xRoiBegin,
        xRoiEnd,
        yRoiBegin,
        yRoiEnd,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln1_batchDD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        dstSize,
        dstSize,
        xRoiBegin,
        xRoiEnd,
        yRoiBegin,
        yRoiEnd,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln1_batchPD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,RppiSize maxDstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_host_maxDstSize(maxDstSize, rpp::deref(rppHandle));
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxDstSize,
        xRoiBegin,
        xRoiEnd,
        yRoiBegin,
        yRoiEnd,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln1_batchSS_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_host_dstSize(dstSize, rpp::deref(rppHandle));
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[2].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[3].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln1_batchDS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_dstSize(dstSize, rpp::deref(rppHandle));
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[2].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[3].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln1_batchPS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,RppiSize maxDstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_host_maxDstSize(maxDstSize, rpp::deref(rppHandle));
    copy_host_dstSize(dstSize, rpp::deref(rppHandle));
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxDstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[2].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[3].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln1_batchSD_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        dstSize,
        dstSize,
        xRoiBegin,
        xRoiEnd,
        yRoiBegin,
        yRoiEnd,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln1_batchDD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        dstSize,
        dstSize,
        xRoiBegin,
        xRoiEnd,
        yRoiBegin,
        yRoiEnd,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln1_batchPD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,RppiSize maxDstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_host_maxDstSize(maxDstSize, rpp::deref(rppHandle));
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxDstSize,
        xRoiBegin,
        xRoiEnd,
        yRoiBegin,
        yRoiEnd,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln1_batchSS_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_host_dstSize(dstSize, rpp::deref(rppHandle));
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[2].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[3].uintmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln1_batchDS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_dstSize(dstSize, rpp::deref(rppHandle));
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[2].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[3].uintmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln1_batchPS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,RppiSize maxDstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_host_maxDstSize(maxDstSize, rpp::deref(rppHandle));
    copy_host_dstSize(dstSize, rpp::deref(rppHandle));
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxDstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[2].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[3].uintmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln1_batchSD_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        dstSize,
        dstSize,
        xRoiBegin,
        xRoiEnd,
        yRoiBegin,
        yRoiEnd,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln1_batchDD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        dstSize,
        dstSize,
        xRoiBegin,
        xRoiEnd,
        yRoiBegin,
        yRoiEnd,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln1_batchPD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,RppiSize maxDstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_host_maxDstSize(maxDstSize, rpp::deref(rppHandle));
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxDstSize,
        xRoiBegin,
        xRoiEnd,
        yRoiBegin,
        yRoiEnd,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln3_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,rppHandle_t rppHandle )
{
    random_crop_letterbox_host(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
             dstSize,
            xRoiBegin,
            xRoiEnd,
            yRoiBegin,
            yRoiEnd,
            RPPI_CHN_PLANAR, 1
            );


    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln3_ROI_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_host_dstSize(dstSize, rpp::deref(rppHandle));
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[2].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[3].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln3_batchSS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_host_dstSize(dstSize, rpp::deref(rppHandle));
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[2].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[3].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln3_batchDS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_dstSize(dstSize, rpp::deref(rppHandle));
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[2].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[3].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln3_batchPS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,RppiSize maxDstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_host_maxDstSize(maxDstSize, rpp::deref(rppHandle));
    copy_host_dstSize(dstSize, rpp::deref(rppHandle));
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxDstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[2].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[3].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln3_batchSD_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        dstSize,
        dstSize,
        xRoiBegin,
        xRoiEnd,
        yRoiBegin,
        yRoiEnd,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln3_batchDD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        dstSize,
        dstSize,
        xRoiBegin,
        xRoiEnd,
        yRoiBegin,
        yRoiEnd,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln3_batchPD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,RppiSize maxDstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_host_maxDstSize(maxDstSize, rpp::deref(rppHandle));
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxDstSize,
        xRoiBegin,
        xRoiEnd,
        yRoiBegin,
        yRoiEnd,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln3_batchSS_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_host_dstSize(dstSize, rpp::deref(rppHandle));
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[2].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[3].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln3_batchDS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_dstSize(dstSize, rpp::deref(rppHandle));
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[2].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[3].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln3_batchPS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,RppiSize maxDstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_host_maxDstSize(maxDstSize, rpp::deref(rppHandle));
    copy_host_dstSize(dstSize, rpp::deref(rppHandle));
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxDstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[2].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[3].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln3_batchSD_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        dstSize,
        dstSize,
        xRoiBegin,
        xRoiEnd,
        yRoiBegin,
        yRoiEnd,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln3_batchDD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        dstSize,
        dstSize,
        xRoiBegin,
        xRoiEnd,
        yRoiBegin,
        yRoiEnd,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln3_batchPD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,RppiSize maxDstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_host_maxDstSize(maxDstSize, rpp::deref(rppHandle));
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxDstSize,
        xRoiBegin,
        xRoiEnd,
        yRoiBegin,
        yRoiEnd,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln3_batchSS_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_host_dstSize(dstSize, rpp::deref(rppHandle));
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[2].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[3].uintmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln3_batchDS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_dstSize(dstSize, rpp::deref(rppHandle));
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[2].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[3].uintmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln3_batchPS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,RppiSize maxDstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_host_maxDstSize(maxDstSize, rpp::deref(rppHandle));
    copy_host_dstSize(dstSize, rpp::deref(rppHandle));
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxDstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[2].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[3].uintmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln3_batchSD_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        dstSize,
        dstSize,
        xRoiBegin,
        xRoiEnd,
        yRoiBegin,
        yRoiEnd,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln3_batchDD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        dstSize,
        dstSize,
        xRoiBegin,
        xRoiEnd,
        yRoiBegin,
        yRoiEnd,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pln3_batchPD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,RppiSize maxDstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_host_maxDstSize(maxDstSize, rpp::deref(rppHandle));
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxDstSize,
        xRoiBegin,
        xRoiEnd,
        yRoiBegin,
        yRoiEnd,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pkd3_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,rppHandle_t rppHandle )
{
    random_crop_letterbox_host(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
             dstSize,
            xRoiBegin,
            xRoiEnd,
            yRoiBegin,
            yRoiEnd,
            RPPI_CHN_PACKED, 3
            );


    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pkd3_ROI_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,RppiROI roiPoints ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_host_dstSize(dstSize, rpp::deref(rppHandle));
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[2].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[3].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pkd3_batchSS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_host_dstSize(dstSize, rpp::deref(rppHandle));
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[2].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[3].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pkd3_batchDS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_dstSize(dstSize, rpp::deref(rppHandle));
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[2].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[3].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pkd3_batchPS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,RppiSize maxDstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_host_maxDstSize(maxDstSize, rpp::deref(rppHandle));
    copy_host_dstSize(dstSize, rpp::deref(rppHandle));
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxDstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[2].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[3].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pkd3_batchSD_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        dstSize,
        dstSize,
        xRoiBegin,
        xRoiEnd,
        yRoiBegin,
        yRoiEnd,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pkd3_batchDD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        dstSize,
        dstSize,
        xRoiBegin,
        xRoiEnd,
        yRoiBegin,
        yRoiEnd,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pkd3_batchPD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,RppiSize maxDstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    RppiROI roiPoints;
    roiPoints.x = 0;
    roiPoints.y = 0;
    roiPoints.roiHeight = 0;
    roiPoints.roiWidth = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_host_maxDstSize(maxDstSize, rpp::deref(rppHandle));
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxDstSize,
        xRoiBegin,
        xRoiEnd,
        yRoiBegin,
        yRoiEnd,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pkd3_batchSS_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_host_dstSize(dstSize, rpp::deref(rppHandle));
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[2].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[3].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pkd3_batchDS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_dstSize(dstSize, rpp::deref(rppHandle));
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[2].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[3].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pkd3_batchPS_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,RppiSize maxDstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_host_maxDstSize(maxDstSize, rpp::deref(rppHandle));
    copy_host_dstSize(dstSize, rpp::deref(rppHandle));
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxDstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[2].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[3].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pkd3_batchSD_ROIS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        dstSize,
        dstSize,
        xRoiBegin,
        xRoiEnd,
        yRoiBegin,
        yRoiEnd,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pkd3_batchDD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        dstSize,
        dstSize,
        xRoiBegin,
        xRoiEnd,
        yRoiBegin,
        yRoiEnd,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pkd3_batchPD_ROIS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,RppiSize maxDstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,RppiROI roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_roi(roiPoints, rpp::deref(rppHandle));
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_host_maxDstSize(maxDstSize, rpp::deref(rppHandle));
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxDstSize,
        xRoiBegin,
        xRoiEnd,
        yRoiBegin,
        yRoiEnd,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pkd3_batchSS_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_host_dstSize(dstSize, rpp::deref(rppHandle));
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[2].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[3].uintmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pkd3_batchDS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_dstSize(dstSize, rpp::deref(rppHandle));
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[2].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[3].uintmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pkd3_batchPS_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiSize dstSize ,RppiSize maxDstSize ,Rpp32u xRoiBegin ,Rpp32u xRoiEnd ,Rpp32u yRoiBegin ,Rpp32u yRoiEnd ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_host_maxDstSize(maxDstSize, rpp::deref(rppHandle));
    copy_host_dstSize(dstSize, rpp::deref(rppHandle));
    copy_param_uint (xRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (xRoiEnd, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiBegin, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (yRoiEnd, rpp::deref(rppHandle), paramIndex++);
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxDstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[2].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[3].uintmem,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pkd3_batchSD_ROID_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        dstSize,
        dstSize,
        xRoiBegin,
        xRoiEnd,
        yRoiBegin,
        yRoiEnd,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pkd3_batchDD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        dstSize,
        dstSize,
        xRoiBegin,
        xRoiEnd,
        yRoiBegin,
        yRoiEnd,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_crop_letterbox_u8_pkd3_batchPD_ROID_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,RppiSize *dstSize ,RppiSize maxDstSize ,Rpp32u *xRoiBegin ,Rpp32u *xRoiEnd ,Rpp32u *yRoiBegin ,Rpp32u *yRoiEnd ,RppiROI *roiPoints ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_host_maxDstSize(maxDstSize, rpp::deref(rppHandle));
    random_crop_letterbox_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        dstSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxDstSize,
        xRoiBegin,
        xRoiEnd,
        yRoiBegin,
        yRoiEnd,
        roiPoints,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}
RppStatus
rppi_random_shadow_u8_pln1_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u x1 ,Rpp32u y1 ,Rpp32u x2 ,Rpp32u y2 ,Rpp32u numberOfShadows ,Rpp32u maxSizeX ,Rpp32u maxSizeY ,rppHandle_t rppHandle )
{

#ifdef OCL_COMPILE
    {
        random_shadow_cl(
            static_cast<cl_mem>(srcPtr),
             srcSize,
            static_cast<cl_mem>(dstPtr),
            x1,
            y1,
            x2,
            y2,
            numberOfShadows,
            maxSizeX,
            maxSizeY,
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#elif defined (HIP_COMPILE)
    {
        random_shadow_hip(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            x1,
            y1,
            x2,
            y2,
            numberOfShadows,
            maxSizeX,
            maxSizeY,
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_shadow_u8_pln1_batchSS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u x1 ,Rpp32u y1 ,Rpp32u x2 ,Rpp32u y2 ,Rpp32u numberOfShadows ,Rpp32u maxSizeX ,Rpp32u maxSizeY ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (x1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (x2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (numberOfShadows, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeX, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeY, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        random_shadow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        random_shadow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_shadow_u8_pln1_batchSD_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *x1 ,Rpp32u *y1 ,Rpp32u *x2 ,Rpp32u *y2 ,Rpp32u *numberOfShadows ,Rpp32u *maxSizeX ,Rpp32u *maxSizeY ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (x1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (x2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (numberOfShadows, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeX, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeY, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        random_shadow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        random_shadow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_shadow_u8_pln1_batchDS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u x1 ,Rpp32u y1 ,Rpp32u x2 ,Rpp32u y2 ,Rpp32u numberOfShadows ,Rpp32u maxSizeX ,Rpp32u maxSizeY ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (x1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (x2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (numberOfShadows, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeX, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeY, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        random_shadow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        random_shadow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_shadow_u8_pln1_batchDD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *x1 ,Rpp32u *y1 ,Rpp32u *x2 ,Rpp32u *y2 ,Rpp32u *numberOfShadows ,Rpp32u *maxSizeX ,Rpp32u *maxSizeY ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (x1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (x2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (numberOfShadows, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeX, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeY, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        random_shadow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        random_shadow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_shadow_u8_pln1_batchPS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u x1 ,Rpp32u y1 ,Rpp32u x2 ,Rpp32u y2 ,Rpp32u numberOfShadows ,Rpp32u maxSizeX ,Rpp32u maxSizeY ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (x1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (x2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (numberOfShadows, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeX, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeY, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        random_shadow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        random_shadow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_shadow_u8_pln1_batchPD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *x1 ,Rpp32u *y1 ,Rpp32u *x2 ,Rpp32u *y2 ,Rpp32u *numberOfShadows ,Rpp32u *maxSizeX ,Rpp32u *maxSizeY ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 1, RPPI_CHN_PLANAR);
    copy_param_uint (x1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (x2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (numberOfShadows, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeX, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeY, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        random_shadow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#elif defined (HIP_COMPILE)
    {
        random_shadow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 1
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_shadow_u8_pln3_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u x1 ,Rpp32u y1 ,Rpp32u x2 ,Rpp32u y2 ,Rpp32u numberOfShadows ,Rpp32u maxSizeX ,Rpp32u maxSizeY ,rppHandle_t rppHandle )
{

#ifdef OCL_COMPILE
    {
        random_shadow_cl(
            static_cast<cl_mem>(srcPtr),
             srcSize,
            static_cast<cl_mem>(dstPtr),
            x1,
            y1,
            x2,
            y2,
            numberOfShadows,
            maxSizeX,
            maxSizeY,
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#elif defined (HIP_COMPILE)
    {
        random_shadow_hip(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            x1,
            y1,
            x2,
            y2,
            numberOfShadows,
            maxSizeX,
            maxSizeY,
            RPPI_CHN_PLANAR, 1
            ,rpp::deref(rppHandle));
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_shadow_u8_pln3_batchSS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u x1 ,Rpp32u y1 ,Rpp32u x2 ,Rpp32u y2 ,Rpp32u numberOfShadows ,Rpp32u maxSizeX ,Rpp32u maxSizeY ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (x1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (x2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (numberOfShadows, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeX, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeY, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        random_shadow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        random_shadow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_shadow_u8_pln3_batchSD_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *x1 ,Rpp32u *y1 ,Rpp32u *x2 ,Rpp32u *y2 ,Rpp32u *numberOfShadows ,Rpp32u *maxSizeX ,Rpp32u *maxSizeY ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (x1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (x2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (numberOfShadows, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeX, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeY, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        random_shadow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        random_shadow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_shadow_u8_pln3_batchDS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u x1 ,Rpp32u y1 ,Rpp32u x2 ,Rpp32u y2 ,Rpp32u numberOfShadows ,Rpp32u maxSizeX ,Rpp32u maxSizeY ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (x1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (x2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (numberOfShadows, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeX, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeY, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        random_shadow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        random_shadow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_shadow_u8_pln3_batchDD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *x1 ,Rpp32u *y1 ,Rpp32u *x2 ,Rpp32u *y2 ,Rpp32u *numberOfShadows ,Rpp32u *maxSizeX ,Rpp32u *maxSizeY ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (x1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (x2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (numberOfShadows, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeX, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeY, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        random_shadow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        random_shadow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_shadow_u8_pln3_batchPS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u x1 ,Rpp32u y1 ,Rpp32u x2 ,Rpp32u y2 ,Rpp32u numberOfShadows ,Rpp32u maxSizeX ,Rpp32u maxSizeY ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (x1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (x2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (numberOfShadows, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeX, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeY, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        random_shadow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        random_shadow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_shadow_u8_pln3_batchPD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *x1 ,Rpp32u *y1 ,Rpp32u *x2 ,Rpp32u *y2 ,Rpp32u *numberOfShadows ,Rpp32u *maxSizeX ,Rpp32u *maxSizeY ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PLANAR);
    copy_param_uint (x1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (x2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (numberOfShadows, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeX, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeY, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        random_shadow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        random_shadow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PLANAR, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_shadow_u8_pkd3_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u x1 ,Rpp32u y1 ,Rpp32u x2 ,Rpp32u y2 ,Rpp32u numberOfShadows ,Rpp32u maxSizeX ,Rpp32u maxSizeY ,rppHandle_t rppHandle )
{

#ifdef OCL_COMPILE
    {
        random_shadow_cl(
            static_cast<cl_mem>(srcPtr),
             srcSize,
            static_cast<cl_mem>(dstPtr),
            x1,
            y1,
            x2,
            y2,
            numberOfShadows,
            maxSizeX,
            maxSizeY,
            RPPI_CHN_PACKED, 3
            ,rpp::deref(rppHandle));
    }
#elif defined (HIP_COMPILE)
    {
        random_shadow_hip(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            x1,
            y1,
            x2,
            y2,
            numberOfShadows,
            maxSizeX,
            maxSizeY,
            RPPI_CHN_PACKED, 3
            ,rpp::deref(rppHandle));
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_shadow_u8_pkd3_batchSS_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u x1 ,Rpp32u y1 ,Rpp32u x2 ,Rpp32u y2 ,Rpp32u numberOfShadows ,Rpp32u maxSizeX ,Rpp32u maxSizeY ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (x1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (x2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (numberOfShadows, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeX, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeY, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        random_shadow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        random_shadow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_shadow_u8_pkd3_batchSD_gpu(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *x1 ,Rpp32u *y1 ,Rpp32u *x2 ,Rpp32u *y2 ,Rpp32u *numberOfShadows ,Rpp32u *maxSizeX ,Rpp32u *maxSizeY ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (x1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (x2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (numberOfShadows, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeX, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeY, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        random_shadow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        random_shadow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_shadow_u8_pkd3_batchDS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u x1 ,Rpp32u y1 ,Rpp32u x2 ,Rpp32u y2 ,Rpp32u numberOfShadows ,Rpp32u maxSizeX ,Rpp32u maxSizeY ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (x1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (x2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (numberOfShadows, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeX, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeY, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        random_shadow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        random_shadow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_shadow_u8_pkd3_batchDD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *x1 ,Rpp32u *y1 ,Rpp32u *x2 ,Rpp32u *y2 ,Rpp32u *numberOfShadows ,Rpp32u *maxSizeX ,Rpp32u *maxSizeY ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (x1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (x2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (numberOfShadows, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeX, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeY, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        random_shadow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        random_shadow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_shadow_u8_pkd3_batchPS_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u x1 ,Rpp32u y1 ,Rpp32u x2 ,Rpp32u y2 ,Rpp32u numberOfShadows ,Rpp32u maxSizeX ,Rpp32u maxSizeY ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (x1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (x2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (numberOfShadows, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeX, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeY, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        random_shadow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        random_shadow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_shadow_u8_pkd3_batchPD_gpu(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *x1 ,Rpp32u *y1 ,Rpp32u *x2 ,Rpp32u *y2 ,Rpp32u *numberOfShadows ,Rpp32u *maxSizeX ,Rpp32u *maxSizeY ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_srcSize(srcSize, rpp::deref(rppHandle));
    copy_srcMaxSize (maxSrcSize, rpp::deref(rppHandle));
    get_srcBatchIndex (rpp::deref(rppHandle), 3, RPPI_CHN_PACKED);
    copy_param_uint (x1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (x2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (numberOfShadows, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeX, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeY, rpp::deref(rppHandle), paramIndex++);

#ifdef OCL_COMPILE
    {
        random_shadow_cl_batch(
            static_cast<cl_mem>(srcPtr),
            static_cast<cl_mem>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#elif defined (HIP_COMPILE)
    {
        random_shadow_hip_batch(
            static_cast<Rpp8u*>(srcPtr),
            static_cast<Rpp8u*>(dstPtr),
            rpp::deref(rppHandle),
            RPPI_CHN_PACKED, 3
        );
    }
#endif //BACKEND

    return RPP_SUCCESS;
}

RppStatus
rppi_random_shadow_u8_pln1_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u x1 ,Rpp32u y1 ,Rpp32u x2 ,Rpp32u y2 ,Rpp32u numberOfShadows ,Rpp32u maxSizeX ,Rpp32u maxSizeY ,rppHandle_t rppHandle )
{
    random_shadow_host(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            x1,
            y1,
            x2,
            y2,
            numberOfShadows,
            maxSizeX,
            maxSizeY,
            RPPI_CHN_PLANAR, 1
            );


    return RPP_SUCCESS;
}

RppStatus
rppi_random_shadow_u8_pln1_batchSS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u x1 ,Rpp32u y1 ,Rpp32u x2 ,Rpp32u y2 ,Rpp32u numberOfShadows ,Rpp32u maxSizeX ,Rpp32u maxSizeY ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_uint (x1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (x2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (numberOfShadows, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeX, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeY, rpp::deref(rppHandle), paramIndex++);
    random_shadow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[2].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[3].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[4].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[5].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[6].uintmem,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_shadow_u8_pln1_batchSD_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *x1 ,Rpp32u *y1 ,Rpp32u *x2 ,Rpp32u *y2 ,Rpp32u *numberOfShadows ,Rpp32u *maxSizeX ,Rpp32u *maxSizeY ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    random_shadow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        x1,
        y1,
        x2,
        y2,
        numberOfShadows,
        maxSizeX,
        maxSizeY,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_shadow_u8_pln1_batchDS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u x1 ,Rpp32u y1 ,Rpp32u x2 ,Rpp32u y2 ,Rpp32u numberOfShadows ,Rpp32u maxSizeX ,Rpp32u maxSizeY ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_param_uint (x1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (x2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (numberOfShadows, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeX, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeY, rpp::deref(rppHandle), paramIndex++);
    random_shadow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[2].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[3].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[4].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[5].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[6].uintmem,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_shadow_u8_pln1_batchDD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *x1 ,Rpp32u *y1 ,Rpp32u *x2 ,Rpp32u *y2 ,Rpp32u *numberOfShadows ,Rpp32u *maxSizeX ,Rpp32u *maxSizeY ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    random_shadow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        x1,
        y1,
        x2,
        y2,
        numberOfShadows,
        maxSizeX,
        maxSizeY,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_shadow_u8_pln1_batchPS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u x1 ,Rpp32u y1 ,Rpp32u x2 ,Rpp32u y2 ,Rpp32u numberOfShadows ,Rpp32u maxSizeX ,Rpp32u maxSizeY ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_uint (x1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (x2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (numberOfShadows, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeX, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeY, rpp::deref(rppHandle), paramIndex++);
    random_shadow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[2].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[3].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[4].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[5].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[6].uintmem,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_shadow_u8_pln1_batchPD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *x1 ,Rpp32u *y1 ,Rpp32u *x2 ,Rpp32u *y2 ,Rpp32u *numberOfShadows ,Rpp32u *maxSizeX ,Rpp32u *maxSizeY ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    random_shadow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        x1,
        y1,
        x2,
        y2,
        numberOfShadows,
        maxSizeX,
        maxSizeY,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 1
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_shadow_u8_pln3_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u x1 ,Rpp32u y1 ,Rpp32u x2 ,Rpp32u y2 ,Rpp32u numberOfShadows ,Rpp32u maxSizeX ,Rpp32u maxSizeY ,rppHandle_t rppHandle )
{
    random_shadow_host(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            x1,
            y1,
            x2,
            y2,
            numberOfShadows,
            maxSizeX,
            maxSizeY,
            RPPI_CHN_PLANAR, 1
            );


    return RPP_SUCCESS;
}

RppStatus
rppi_random_shadow_u8_pln3_batchSS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u x1 ,Rpp32u y1 ,Rpp32u x2 ,Rpp32u y2 ,Rpp32u numberOfShadows ,Rpp32u maxSizeX ,Rpp32u maxSizeY ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_uint (x1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (x2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (numberOfShadows, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeX, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeY, rpp::deref(rppHandle), paramIndex++);
    random_shadow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[2].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[3].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[4].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[5].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[6].uintmem,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_shadow_u8_pln3_batchSD_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *x1 ,Rpp32u *y1 ,Rpp32u *x2 ,Rpp32u *y2 ,Rpp32u *numberOfShadows ,Rpp32u *maxSizeX ,Rpp32u *maxSizeY ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    random_shadow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        x1,
        y1,
        x2,
        y2,
        numberOfShadows,
        maxSizeX,
        maxSizeY,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_shadow_u8_pln3_batchDS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u x1 ,Rpp32u y1 ,Rpp32u x2 ,Rpp32u y2 ,Rpp32u numberOfShadows ,Rpp32u maxSizeX ,Rpp32u maxSizeY ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_param_uint (x1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (x2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (numberOfShadows, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeX, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeY, rpp::deref(rppHandle), paramIndex++);
    random_shadow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[2].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[3].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[4].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[5].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[6].uintmem,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_shadow_u8_pln3_batchDD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *x1 ,Rpp32u *y1 ,Rpp32u *x2 ,Rpp32u *y2 ,Rpp32u *numberOfShadows ,Rpp32u *maxSizeX ,Rpp32u *maxSizeY ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    random_shadow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        x1,
        y1,
        x2,
        y2,
        numberOfShadows,
        maxSizeX,
        maxSizeY,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_shadow_u8_pln3_batchPS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u x1 ,Rpp32u y1 ,Rpp32u x2 ,Rpp32u y2 ,Rpp32u numberOfShadows ,Rpp32u maxSizeX ,Rpp32u maxSizeY ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_uint (x1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (x2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (numberOfShadows, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeX, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeY, rpp::deref(rppHandle), paramIndex++);
    random_shadow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[2].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[3].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[4].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[5].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[6].uintmem,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_shadow_u8_pln3_batchPD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *x1 ,Rpp32u *y1 ,Rpp32u *x2 ,Rpp32u *y2 ,Rpp32u *numberOfShadows ,Rpp32u *maxSizeX ,Rpp32u *maxSizeY ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    random_shadow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        x1,
        y1,
        x2,
        y2,
        numberOfShadows,
        maxSizeX,
        maxSizeY,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PLANAR, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_shadow_u8_pkd3_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u x1 ,Rpp32u y1 ,Rpp32u x2 ,Rpp32u y2 ,Rpp32u numberOfShadows ,Rpp32u maxSizeX ,Rpp32u maxSizeY ,rppHandle_t rppHandle )
{
    random_shadow_host(
            static_cast<Rpp8u *>(srcPtr),
             srcSize,
            static_cast<Rpp8u *>(dstPtr),
            x1,
            y1,
            x2,
            y2,
            numberOfShadows,
            maxSizeX,
            maxSizeY,
            RPPI_CHN_PACKED, 3
            );


    return RPP_SUCCESS;
}

RppStatus
rppi_random_shadow_u8_pkd3_batchSS_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u x1 ,Rpp32u y1 ,Rpp32u x2 ,Rpp32u y2 ,Rpp32u numberOfShadows ,Rpp32u maxSizeX ,Rpp32u maxSizeY ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    copy_param_uint (x1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (x2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (numberOfShadows, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeX, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeY, rpp::deref(rppHandle), paramIndex++);
    random_shadow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[2].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[3].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[4].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[5].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[6].uintmem,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_shadow_u8_pkd3_batchSD_host(RppPtr_t srcPtr ,RppiSize srcSize ,RppPtr_t dstPtr ,Rpp32u *x1 ,Rpp32u *y1 ,Rpp32u *x2 ,Rpp32u *y2 ,Rpp32u *numberOfShadows ,Rpp32u *maxSizeX ,Rpp32u *maxSizeY ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_srcSize(srcSize, rpp::deref(rppHandle));
    random_shadow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.srcSize,
        static_cast<Rpp8u*>(dstPtr),
        x1,
        y1,
        x2,
        y2,
        numberOfShadows,
        maxSizeX,
        maxSizeY,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_shadow_u8_pkd3_batchDS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u x1 ,Rpp32u y1 ,Rpp32u x2 ,Rpp32u y2 ,Rpp32u numberOfShadows ,Rpp32u maxSizeX ,Rpp32u maxSizeY ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_param_uint (x1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (x2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (numberOfShadows, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeX, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeY, rpp::deref(rppHandle), paramIndex++);
    random_shadow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[2].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[3].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[4].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[5].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[6].uintmem,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_shadow_u8_pkd3_batchDD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppPtr_t dstPtr ,Rpp32u *x1 ,Rpp32u *y1 ,Rpp32u *x2 ,Rpp32u *y2 ,Rpp32u *numberOfShadows ,Rpp32u *maxSizeX ,Rpp32u *maxSizeY ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    random_shadow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        srcSize,
        static_cast<Rpp8u*>(dstPtr),
        x1,
        y1,
        x2,
        y2,
        numberOfShadows,
        maxSizeX,
        maxSizeY,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_shadow_u8_pkd3_batchPS_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u x1 ,Rpp32u y1 ,Rpp32u x2 ,Rpp32u y2 ,Rpp32u numberOfShadows ,Rpp32u maxSizeX ,Rpp32u maxSizeY ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    copy_param_uint (x1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y1, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (x2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (y2, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (numberOfShadows, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeX, rpp::deref(rppHandle), paramIndex++);
    copy_param_uint (maxSizeY, rpp::deref(rppHandle), paramIndex++);
    random_shadow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[0].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[1].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[2].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[3].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[4].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[5].uintmem,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.uintArr[6].uintmem,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}

RppStatus
rppi_random_shadow_u8_pkd3_batchPD_host(RppPtr_t srcPtr ,RppiSize *srcSize ,RppiSize maxSrcSize ,RppPtr_t dstPtr ,Rpp32u *x1 ,Rpp32u *y1 ,Rpp32u *x2 ,Rpp32u *y2 ,Rpp32u *numberOfShadows ,Rpp32u *maxSizeX ,Rpp32u *maxSizeY ,Rpp32u nbatchSize ,rppHandle_t rppHandle )
{
    Rpp32u paramIndex = 0;
    copy_host_maxSrcSize(maxSrcSize, rpp::deref(rppHandle));
    random_shadow_host_batch<Rpp8u>(
        static_cast<Rpp8u*>(srcPtr),
        srcSize,
        rpp::deref(rppHandle).GetInitHandle()->mem.mcpu.maxSrcSize,
        static_cast<Rpp8u*>(dstPtr),
        x1,
        y1,
        x2,
        y2,
        numberOfShadows,
        maxSizeX,
        maxSizeY,
        rpp::deref(rppHandle).GetBatchSize(),
        RPPI_CHN_PACKED, 3
    );

    return RPP_SUCCESS;
}